{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/pages/template.tsx\";\nimport { Button, Flex, Select, FormLabel, FormControl } from \"@chakra-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport { useCreateTemplateMutation, useEditTemplateMutation, useExoQuery, useTemplatesQuery } from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { BodyFormik } from \"../components/BodyFormik\";\nconst validationSchema = yup.object({\n  templateDetails: yup.array().of(yup.object({\n    exoDetail: yup.array().of(yup.object({\n      sets: yup.number().integer().positive().required(\"Nb sets is required\"),\n      reps: yup.number().integer().positive().required(\"Nb reps is required\"),\n      weight: yup.number().positive().required(\"Weight is required\"),\n      grade: yup.number().positive().max(10).required(\"Grade is required\")\n    }))\n  }))\n});\n\nconst CreateTemplate = ({}) => {\n  var _exo$exo, _templates$templates;\n\n  const router = useRouter();\n  const apolloClient = useApolloClient();\n  useIsAuth();\n  const [createTemplate] = useCreateTemplateMutation();\n  const [editTemplate] = useEditTemplateMutation();\n  const {\n    data: templates\n  } = useTemplatesQuery();\n  const {\n    data: exo\n  } = useExoQuery();\n  const {\n    0: templateFct,\n    1: setTemplateFct\n  } = useState(\"create\");\n  const {\n    0: templateId,\n    1: setTemplateId\n  } = useState(0);\n  const {\n    0: tpInput,\n    1: setTpInput\n  } = useState({\n    templateType: \"\",\n    name: \"\",\n    templateDetails: []\n  });\n  const exoItems = exo === null || exo === void 0 ? void 0 : (_exo$exo = exo.exo) === null || _exo$exo === void 0 ? void 0 : _exo$exo.map(e => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: e.exoId,\n      children: e.exoDesc\n    }, e.exoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  });\n  const initValueForm = {};\n  const templatesName = templates === null || templates === void 0 ? void 0 : (_templates$templates = templates.templates) === null || _templates$templates === void 0 ? void 0 : _templates$templates.map(t => {\n    initValueForm[t.id] = {\n      templateType: t.templateType,\n      name: t.name,\n      templateDetails: t.templateDetails.map(td => {\n        return {\n          exoId: \"\" + td.exoId,\n          exoDetail: td.exoDetail.map(e => {\n            return {\n              sets: e.sets,\n              reps: e.reps,\n              weight: e.weight,\n              grade: e.grade,\n              rest: e.rest,\n              feedback: e.feedback\n            };\n          })\n        };\n      })\n    };\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: t.id,\n      children: t.name\n    }, t.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: tpInput,\n      validationSchema: validationSchema,\n      onSubmit: async values => {\n        if (templateFct === \"create\") {\n          await createTemplate({\n            variables: {\n              options: values\n            },\n            update: cache => {\n              cache.evict({\n                fieldName: \"templates:{}\"\n              });\n            }\n          });\n        } else {\n          await editTemplate({\n            variables: {\n              id: templateId,\n              options: values\n            },\n            update: cache => {\n              cache.evict({\n                fieldName: \"templates:{}\"\n              });\n            }\n          });\n        }\n\n        await apolloClient.resetStore();\n        router.push(\"/\");\n      },\n      children: ({\n        isSubmitting,\n        values\n      }) => {\n        var _templates$templates2;\n\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              name: \"templateType\",\n              placeholder: \"Template Type\",\n              label: \"Template Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"name\",\n              placeholder: \"Template name\",\n              label: \"Template name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), (templates === null || templates === void 0 ? void 0 : (_templates$templates2 = templates.templates) === null || _templates$templates2 === void 0 ? void 0 : _templates$templates2.length) !== 0 ? /*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"templatesName\",\n                children: \"Template List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: Select,\n                name: \"templatesName\",\n                label: \"Template List\",\n                type: \"select\",\n                onChange: t => {\n                  if (parseInt(t.target.value, 10) === 0) {\n                    setTemplateId(0);\n                    setTemplateFct(\"create\");\n                    setTpInput({\n                      templateType: \"\",\n                      name: \"\",\n                      templateDetails: []\n                    });\n                  } else {\n                    setTemplateId(parseInt(t.target.value, 10));\n                    setTemplateFct(\"update\"); // values = initValueForm[t.target.value];\n\n                    setTpInput(initValueForm[t.target.value]);\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\"\n                }, \"0\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 21\n                }, this), templatesName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BodyFormik, {\n            valuesArray: values.templateDetails,\n            nameFieldArray: \"templateDetails\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), templateFct === \"create\" ? /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            isLoading: isSubmitting,\n            variantColor: \"teal\",\n            children: \"create template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            isLoading: isSubmitting,\n            variantColor: \"teal\",\n            children: \"update template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(CreateTemplate);","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/pages/template.tsx"],"names":["Button","Flex","Select","FormLabel","FormControl","Field","Form","Formik","useRouter","React","useState","InputField","Layout","useCreateTemplateMutation","useEditTemplateMutation","useExoQuery","useTemplatesQuery","useIsAuth","withApollo","yup","useApolloClient","BodyFormik","validationSchema","object","templateDetails","array","of","exoDetail","sets","number","integer","positive","required","reps","weight","grade","max","CreateTemplate","router","apolloClient","createTemplate","editTemplate","data","templates","exo","templateFct","setTemplateFct","templateId","setTemplateId","tpInput","setTpInput","templateType","name","exoItems","map","e","exoId","exoDesc","initValueForm","templatesName","t","id","td","rest","feedback","values","variables","options","update","cache","evict","fieldName","resetStore","push","isSubmitting","length","parseInt","target","value","ssr"],"mappings":"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","sourcesContent":["import { Button, Flex, Select, FormLabel, FormControl } from \"@chakra-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport {\n  TemplateInput,\n  useCreateTemplateMutation,\n  useEditTemplateMutation,\n  useExoQuery,\n  useTemplatesQuery,\n} from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { BodyFormik } from \"../components/BodyFormik\";\n\nconst validationSchema = yup.object({\n  templateDetails: yup.array().of(\n    yup.object({\n      exoDetail: yup.array().of(\n        yup.object({\n          sets: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb sets is required\"),\n          reps: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb reps is required\"),\n          weight: yup.number().positive().required(\"Weight is required\"),\n          grade: yup.number().positive().max(10).required(\"Grade is required\"),\n        })\n      ),\n    })\n  ),\n});\n\nconst CreateTemplate: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const apolloClient = useApolloClient();\n  useIsAuth();\n  const [createTemplate] = useCreateTemplateMutation();\n  const [editTemplate] = useEditTemplateMutation();\n  const { data: templates } = useTemplatesQuery();\n  const { data: exo } = useExoQuery();\n  const [templateFct, setTemplateFct] = useState<\"create\" | \"update\">(\"create\");\n  const [templateId, setTemplateId] = useState<number>(0);\n  const [tpInput, setTpInput] = useState<TemplateInput>({\n    templateType: \"\",\n    name: \"\",\n    templateDetails: [],\n  });\n  const exoItems = exo?.exo?.map((e) => {\n    return (\n      <option value={e.exoId} key={e.exoId}>\n        {e.exoDesc}\n      </option>\n    );\n  });\n  const initValueForm: Record<number, TemplateInput> = {};\n  const templatesName = templates?.templates?.map((t) => {\n    initValueForm[t.id] = {\n      templateType: t.templateType,\n      name: t.name,\n      templateDetails: t.templateDetails.map((td) => {\n        return {\n          exoId: \"\" + td.exoId,\n          exoDetail: td.exoDetail.map((e) => {\n            return {\n              sets: e.sets,\n              reps: e.reps,\n              weight: e.weight,\n              grade: e.grade,\n              rest: e.rest,\n              feedback: e.feedback,\n            };\n          }),\n        };\n      }),\n    };\n\n    return (\n      <option value={t.id} key={t.id}>\n        {t.name}\n      </option>\n    );\n  });\n\n  return (\n    <Layout>\n      <Formik\n        enableReinitialize={true}\n        initialValues={tpInput}\n        validationSchema={validationSchema}\n        onSubmit={async (values) => {\n          if (templateFct === \"create\") {\n            await createTemplate({\n              variables: { options: values },\n              update: (cache) => {\n                cache.evict({ fieldName: \"templates:{}\" });\n              },\n            });\n          } else {\n            await editTemplate({\n              variables: { id: templateId, options: values },\n              update: (cache) => {\n                cache.evict({ fieldName: \"templates:{}\" });\n              },\n            });\n          }\n          await apolloClient.resetStore();\n          router.push(\"/\");\n        }}\n      >\n        {({ isSubmitting, values }) => (\n          <Form>\n            <Flex>\n              <InputField\n                name=\"templateType\"\n                placeholder=\"Template Type\"\n                label=\"Template Type\"\n              />\n              <InputField\n                name=\"name\"\n                placeholder=\"Template name\"\n                label=\"Template name\"\n              />\n              {templates?.templates?.length !== 0 ? (\n                <FormControl>\n                  <FormLabel htmlFor=\"templatesName\">Template List</FormLabel>\n                  <Field\n                    as={Select}\n                    name=\"templatesName\"\n                    label=\"Template List\"\n                    type=\"select\"\n                    onChange={(t) => {\n                      if (parseInt(t.target.value, 10) === 0) {\n                        setTemplateId(0);\n                        setTemplateFct(\"create\");\n                        setTpInput({\n                          templateType: \"\",\n                          name: \"\",\n                          templateDetails: [],\n                        });\n                      } else {\n                        setTemplateId(parseInt(t.target.value, 10));\n                        setTemplateFct(\"update\");\n                        // values = initValueForm[t.target.value];\n                        setTpInput(initValueForm[t.target.value]);\n                      }\n                    }}\n                  >\n                    <option value=\"0\" key=\"0\"></option>\n                    {templatesName}\n                  </Field>\n                </FormControl>\n              ) : null}\n            </Flex>\n            <BodyFormik\n              valuesArray={values.templateDetails}\n              nameFieldArray=\"templateDetails\"\n            />\n            {templateFct === \"create\" ? (\n              <Button\n                mt={4}\n                type=\"submit\"\n                isLoading={isSubmitting}\n                variantColor=\"teal\"\n              >\n                create template\n              </Button>\n            ) : (\n              <Button\n                mt={4}\n                type=\"submit\"\n                isLoading={isSubmitting}\n                variantColor=\"teal\"\n              >\n                update template\n              </Button>\n            )}\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: false })(CreateTemplate);\n"]},"metadata":{},"sourceType":"module"}