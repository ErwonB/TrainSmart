{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/components/ChangeProfile.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Box, FormControl, FormLabel, Select } from \"@chakra-ui/core\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { useChangeProfileMutation } from \"../generated/graphql\";\nimport * as yup from \"yup\";\nimport { Field, Formik } from \"formik\";\nimport { InputField } from \"./InputField\";\nvar validationSchema = yup.object({\n  templateDetails: yup.array().of(yup.object({\n    exoDetail: yup.array().of(yup.object({\n      sets: yup.number().integer().positive().required(\"Nb sets is required\"),\n      reps: yup.number().integer().positive().required(\"Nb reps is required\"),\n      weight: yup.number().positive().required(\"Weight is required\"),\n      grade: yup.number().positive().max(10).required(\"Grade is required\")\n    }))\n  })),\n  trainingFrequency: yup.number().positive()\n});\nexport var ChangeProfile = function ChangeProfile(_ref) {\n  _s();\n\n  var profile = _ref.profile;\n  var apolloClient = useApolloClient();\n  var router = useRouter();\n\n  var _useChangeProfileMuta = useChangeProfileMutation(),\n      _useChangeProfileMuta2 = _slicedToArray(_useChangeProfileMuta, 1),\n      changeProfile = _useChangeProfileMuta2[0];\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: !profile ? {\n        lang_cd: \"\",\n        trainingFrequency: 0,\n        trainingType: \"\",\n        sex: \"\"\n      } : {\n        lang_cd: profile.lang_cd,\n        trainingType: profile.trainingType,\n        trainingFrequency: profile.trainingFrequency,\n        sex: profile.sex\n      },\n      validationSchema: validationSchema,\n      onSubmit: /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return changeProfile({\n                    variables: {\n                      options: {\n                        lang_cd: values.lang_cd,\n                        trainingType: values.trainingType,\n                        trainingFrequency: values.trainingFrequency,\n                        sex: values.sex\n                      }\n                    }\n                  });\n\n                case 2:\n                  _context.next = 4;\n                  return apolloClient.resetStore();\n\n                case 4:\n                  router.push(\"/\");\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          htmlFor: \"lang_cd\",\n          children: \"Language\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Field, {\n          as: Select,\n          name: \"lang_cd\",\n          label: \"Language\",\n          type: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"FR\",\n            children: \"FR\"\n          }, \"FR\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"EN\",\n            children: \"EN\"\n          }, \"EN\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n        name: \"trainingFrequency\",\n        placeholder: \"Training Frequency\",\n        label: \"Training Frequency\",\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n        name: \"trainingType\",\n        placeholder: \"Training Type\",\n        label: \"Training Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          htmlFor: \"sex\",\n          children: \"Sex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Field, {\n          as: Select,\n          name: \"sex\",\n          label: \"Sex\",\n          type: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"M\",\n            children: \"M\"\n          }, \"M\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"F\",\n            children: \"F\"\n          }, \"F\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChangeProfile, \"nD5h+Sh8UX84tOONU/jgopnk4/w=\", false, function () {\n  return [useApolloClient, useRouter, useChangeProfileMutation];\n});\n\n_c = ChangeProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeProfile\");","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/components/ChangeProfile.tsx"],"names":["React","Box","FormControl","FormLabel","Select","useRouter","useApolloClient","useChangeProfileMutation","yup","Field","Formik","InputField","validationSchema","object","templateDetails","array","of","exoDetail","sets","number","integer","positive","required","reps","weight","grade","max","trainingFrequency","ChangeProfile","profile","apolloClient","router","changeProfile","lang_cd","trainingType","sex","values","variables","options","resetStore","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Box, FormControl, FormLabel, Select } from \"@chakra-ui/core\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nimport {\n  RegularProfileFragment,\n  useChangeProfileMutation,\n} from \"../generated/graphql\";\nimport * as yup from \"yup\";\nimport { Field, Formik } from \"formik\";\nimport { InputField } from \"./InputField\";\n\ninterface ChangeProfileProps {\n  profile: RegularProfileFragment | null;\n}\n\nconst validationSchema = yup.object({\n  templateDetails: yup.array().of(\n    yup.object({\n      exoDetail: yup.array().of(\n        yup.object({\n          sets: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb sets is required\"),\n          reps: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb reps is required\"),\n          weight: yup.number().positive().required(\"Weight is required\"),\n          grade: yup.number().positive().max(10).required(\"Grade is required\"),\n        })\n      ),\n    })\n  ),\n  trainingFrequency: yup.number().positive(),\n});\n\nexport const ChangeProfile: React.FC<ChangeProfileProps> = ({ profile }) => {\n  const apolloClient = useApolloClient();\n  const router = useRouter();\n  const [changeProfile] = useChangeProfileMutation();\n\n  return (\n    <Box>\n      <Formik\n        initialValues={\n          !profile\n            ? { lang_cd: \"\", trainingFrequency: 0, trainingType: \"\", sex: \"\" }\n            : {\n                lang_cd: profile.lang_cd,\n                trainingType: profile.trainingType,\n                trainingFrequency: profile.trainingFrequency,\n                sex: profile.sex,\n              }\n        }\n        validationSchema={validationSchema}\n        onSubmit={async (values) => {\n          await changeProfile({\n            variables: {\n              options: {\n                lang_cd: values.lang_cd,\n                trainingType: values.trainingType,\n                trainingFrequency: values.trainingFrequency,\n                sex: values.sex,\n              },\n            },\n          });\n          await apolloClient.resetStore();\n          router.push(\"/\");\n        }}\n      >\n        <FormControl>\n          <FormLabel htmlFor=\"lang_cd\">Language</FormLabel>\n          <Field as={Select} name=\"lang_cd\" label=\"Language\" type=\"select\">\n            <option value=\"FR\" key=\"FR\">\n              FR\n            </option>\n            <option value=\"EN\" key=\"EN\">\n              EN\n            </option>\n          </Field>\n        </FormControl>\n        <InputField\n          name=\"trainingFrequency\"\n          placeholder=\"Training Frequency\"\n          label=\"Training Frequency\"\n          type=\"number\"\n        />\n        <InputField\n          name=\"trainingType\"\n          placeholder=\"Training Type\"\n          label=\"Training Type\"\n        />\n        <FormControl>\n          <FormLabel htmlFor=\"sex\">Sex</FormLabel>\n          <Field as={Select} name=\"sex\" label=\"Sex\" type=\"select\">\n            <option value=\"M\" key=\"M\">\n              M\n            </option>\n            <option value=\"F\" key=\"F\">\n              F\n            </option>\n          </Field>\n        </FormControl>\n      </Formik>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}