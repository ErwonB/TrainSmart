{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/components/ChangeProfile.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { FormControl, FormLabel, Select } from \"@chakra-ui/core\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { useChangeProfileMutation } from \"../generated/graphql\";\nimport * as yup from \"yup\";\nimport { Field, Formik } from \"formik\";\nimport { InputField } from \"./InputField\";\nvar validationSchema = yup.object({\n  templateDetails: yup.array().of(yup.object({\n    exoDetail: yup.array().of(yup.object({\n      sets: yup.number().integer().positive().required(\"Nb sets is required\"),\n      reps: yup.number().integer().positive().required(\"Nb reps is required\"),\n      weight: yup.number().positive().required(\"Weight is required\"),\n      grade: yup.number().positive().max(10).required(\"Grade is required\")\n    }))\n  })),\n  trainingFrequency: yup.number().positive()\n});\nexport var ChangeProfile = function ChangeProfile(_ref) {\n  _s();\n\n  var profile = _ref.profile;\n  var apolloClient = useApolloClient();\n  var router = useRouter();\n\n  var _useChangeProfileMuta = useChangeProfileMutation(),\n      _useChangeProfileMuta2 = _slicedToArray(_useChangeProfileMuta, 1),\n      changeProfile = _useChangeProfileMuta2[0];\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: profile,\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return changeProfile({\n                  variables: {\n                    options: values\n                  }\n                });\n\n              case 2:\n                _context.next = 4;\n                return apolloClient.resetStore();\n\n              case 4:\n                router.push(\"/\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        htmlFor: \"lang_cd\",\n        children: \"Language\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Field, {\n        as: Select,\n        name: \"lang_cd\",\n        label: \"Language\",\n        type: \"select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"FR\",\n          children: \"FR\"\n        }, \"FR\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"EN\",\n          children: \"EN\"\n        }, \"EN\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n      name: \"trainingFrequency\",\n      placeholder: \"Training Frequency\",\n      label: \"Training Frequency\",\n      type: \"number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n      name: \"trainingType\",\n      placeholder: \"Training Type\",\n      label: \"Training Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        htmlFor: \"sex\",\n        children: \"Sex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Field, {\n        as: Select,\n        name: \"sex\",\n        label: \"Sex\",\n        type: \"select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"M\",\n          children: \"M\"\n        }, \"M\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"F\",\n          children: \"F\"\n        }, \"F\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChangeProfile, \"nD5h+Sh8UX84tOONU/jgopnk4/w=\", false, function () {\n  return [useApolloClient, useRouter, useChangeProfileMutation];\n});\n\n_c = ChangeProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeProfile\");","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/components/ChangeProfile.tsx"],"names":["React","FormControl","FormLabel","Select","useRouter","useApolloClient","useChangeProfileMutation","yup","Field","Formik","InputField","validationSchema","object","templateDetails","array","of","exoDetail","sets","number","integer","positive","required","reps","weight","grade","max","trainingFrequency","ChangeProfile","profile","apolloClient","router","changeProfile","values","variables","options","resetStore","push"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,iBAA/C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAEEC,wBAFF,QAGO,sBAHP;AAIA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,QAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAMA,IAAMC,gBAAgB,GAAGJ,GAAG,CAACK,MAAJ,CAAW;AAClCC,EAAAA,eAAe,EAAEN,GAAG,CAACO,KAAJ,GAAYC,EAAZ,CACfR,GAAG,CAACK,MAAJ,CAAW;AACTI,IAAAA,SAAS,EAAET,GAAG,CAACO,KAAJ,GAAYC,EAAZ,CACTR,GAAG,CAACK,MAAJ,CAAW;AACTK,MAAAA,IAAI,EAAEV,GAAG,CACNW,MADG,GAEHC,OAFG,GAGHC,QAHG,GAIHC,QAJG,CAIM,qBAJN,CADG;AAMTC,MAAAA,IAAI,EAAEf,GAAG,CACNW,MADG,GAEHC,OAFG,GAGHC,QAHG,GAIHC,QAJG,CAIM,qBAJN,CANG;AAWTE,MAAAA,MAAM,EAAEhB,GAAG,CAACW,MAAJ,GAAaE,QAAb,GAAwBC,QAAxB,CAAiC,oBAAjC,CAXC;AAYTG,MAAAA,KAAK,EAAEjB,GAAG,CAACW,MAAJ,GAAaE,QAAb,GAAwBK,GAAxB,CAA4B,EAA5B,EAAgCJ,QAAhC,CAAyC,mBAAzC;AAZE,KAAX,CADS;AADF,GAAX,CADe,CADiB;AAqBlCK,EAAAA,iBAAiB,EAAEnB,GAAG,CAACW,MAAJ,GAAaE,QAAb;AArBe,CAAX,CAAzB;AAwBA,OAAO,IAAMO,aAA2C,GAAG,SAA9CA,aAA8C,OAAiB;AAAA;;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC1E,MAAMC,YAAY,GAAGxB,eAAe,EAApC;AACA,MAAMyB,MAAM,GAAG1B,SAAS,EAAxB;;AAF0E,8BAGlDE,wBAAwB,EAH0B;AAAA;AAAA,MAGnEyB,aAHmE;;AAK1E,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAEH,OADjB;AAEE,IAAA,gBAAgB,EAAEjB,gBAFpB;AAGE,IAAA,QAAQ;AAAA,2EAAE,iBAAOqB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACFD,aAAa,CAAC;AAAEE,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,OAAO,EAAEF;AAAX;AAAb,iBAAD,CADX;;AAAA;AAAA;AAAA,uBAEFH,YAAY,CAACM,UAAb,EAFE;;AAAA;AAGRL,gBAAAA,MAAM,CAACM,IAAP,CAAY,GAAZ;;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAHV;AAAA,4BASE,QAAC,WAAD;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,KAAD;AAAO,QAAA,EAAE,EAAEjC,MAAX;AAAmB,QAAA,IAAI,EAAC,SAAxB;AAAkC,QAAA,KAAK,EAAC,UAAxC;AAAmD,QAAA,IAAI,EAAC,QAAxD;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,IAAd;AAAA;AAAA,WAAuB,IAAvB;AAAA;AAAA;AAAA;AAAA,iBADF,eAIE;AAAQ,UAAA,KAAK,EAAC,IAAd;AAAA;AAAA,WAAuB,IAAvB;AAAA;AAAA;AAAA;AAAA,iBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aATF,eAoBE,QAAC,UAAD;AACE,MAAA,IAAI,EAAC,mBADP;AAEE,MAAA,WAAW,EAAC,oBAFd;AAGE,MAAA,KAAK,EAAC,oBAHR;AAIE,MAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,aApBF,eA0BE,QAAC,UAAD;AACE,MAAA,IAAI,EAAC,cADP;AAEE,MAAA,WAAW,EAAC,eAFd;AAGE,MAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,aA1BF,eA+BE,QAAC,WAAD;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,KAAD;AAAO,QAAA,EAAE,EAAEA,MAAX;AAAmB,QAAA,IAAI,EAAC,KAAxB;AAA8B,QAAA,KAAK,EAAC,KAApC;AAA0C,QAAA,IAAI,EAAC,QAA/C;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA,WAAsB,GAAtB;AAAA;AAAA;AAAA;AAAA,iBADF,eAIE;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA,WAAsB,GAAtB;AAAA;AAAA;AAAA;AAAA,iBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA6CD,CAlDM;;GAAMwB,a;UACUtB,e,EACND,S,EACSE,wB;;;KAHbqB,a","sourcesContent":["import React from \"react\";\nimport { FormControl, FormLabel, Select } from \"@chakra-ui/core\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nimport {\n  RegularProfileFragment,\n  useChangeProfileMutation,\n} from \"../generated/graphql\";\nimport * as yup from \"yup\";\nimport { Field, Formik } from \"formik\";\nimport { InputField } from \"./InputField\";\n\ninterface ChangeProfileProps {\n  profile: RegularProfileFragment;\n}\n\nconst validationSchema = yup.object({\n  templateDetails: yup.array().of(\n    yup.object({\n      exoDetail: yup.array().of(\n        yup.object({\n          sets: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb sets is required\"),\n          reps: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb reps is required\"),\n          weight: yup.number().positive().required(\"Weight is required\"),\n          grade: yup.number().positive().max(10).required(\"Grade is required\"),\n        })\n      ),\n    })\n  ),\n  trainingFrequency: yup.number().positive(),\n});\n\nexport const ChangeProfile: React.FC<ChangeProfileProps> = ({ profile }) => {\n  const apolloClient = useApolloClient();\n  const router = useRouter();\n  const [changeProfile] = useChangeProfileMutation();\n\n  return (\n    <Formik\n      initialValues={profile}\n      validationSchema={validationSchema}\n      onSubmit={async (values) => {\n        await changeProfile({ variables: { options: values } });\n        await apolloClient.resetStore();\n        router.push(\"/\");\n      }}\n    >\n      <FormControl>\n        <FormLabel htmlFor=\"lang_cd\">Language</FormLabel>\n        <Field as={Select} name=\"lang_cd\" label=\"Language\" type=\"select\">\n          <option value=\"FR\" key=\"FR\">\n            FR\n          </option>\n          <option value=\"EN\" key=\"EN\">\n            EN\n          </option>\n        </Field>\n      </FormControl>\n      <InputField\n        name=\"trainingFrequency\"\n        placeholder=\"Training Frequency\"\n        label=\"Training Frequency\"\n        type=\"number\"\n      />\n      <InputField\n        name=\"trainingType\"\n        placeholder=\"Training Type\"\n        label=\"Training Type\"\n      />\n      <FormControl>\n        <FormLabel htmlFor=\"sex\">Sex</FormLabel>\n        <Field as={Select} name=\"sex\" label=\"Sex\" type=\"select\">\n          <option value=\"M\" key=\"M\">\n            M\n          </option>\n          <option value=\"F\" key=\"F\">\n            F\n          </option>\n        </Field>\n      </FormControl>\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}