{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularWorkoutFragmentDoc = gql`\n    fragment RegularWorkout on Workout {\n  id\n  workoutDt\n  createdAt\n  updatedAt\n  workoutType\n  workoutDesc\n  weekNb\n  workoutDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularWorkoutResponseFragmentDoc = gql`\n    fragment RegularWorkoutResponse on WorkoutResponse {\n  errors {\n    ...RegularError\n  }\n  workout {\n    ...RegularWorkout\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularWorkoutFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions) {\n  return Apollo.useMutation(ChangePasswordDocument, baseOptions);\n}\nexport const ChangeProfileDocument = gql`\n    mutation ChangeProfile($options: ProfileInput!) {\n  changeProfile(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useChangeProfileMutation__\n *\n * To run a mutation, you first call `useChangeProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeProfileMutation, { data, loading, error }] = useChangeProfileMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useChangeProfileMutation(baseOptions) {\n  return Apollo.useMutation(ChangeProfileDocument, baseOptions);\n}\nexport const CreateWorkoutDocument = gql`\n    mutation CreateWorkout($options: WorkoutInput!) {\n  createWorkout(options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\n\n/**\n * __useCreateWorkoutMutation__\n *\n * To run a mutation, you first call `useCreateWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWorkoutMutation, { data, loading, error }] = useCreateWorkoutMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateWorkoutMutation(baseOptions) {\n  return Apollo.useMutation(CreateWorkoutDocument, baseOptions);\n}\nexport const DeleteWorkoutDocument = gql`\n    mutation DeleteWorkout($id: Int!) {\n  deleteWorkout(id: $id)\n}\n    `;\n\n/**\n * __useDeleteWorkoutMutation__\n *\n * To run a mutation, you first call `useDeleteWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkoutMutation, { data, loading, error }] = useDeleteWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkoutMutation(baseOptions) {\n  return Apollo.useMutation(DeleteWorkoutDocument, baseOptions);\n}\nexport const EditWorkoutDocument = gql`\n    mutation EditWorkout($id: Int!, $options: WorkoutInput!) {\n  editWorkout(id: $id, options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\n\n/**\n * __useEditWorkoutMutation__\n *\n * To run a mutation, you first call `useEditWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkoutMutation, { data, loading, error }] = useEditWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditWorkoutMutation(baseOptions) {\n  return Apollo.useMutation(EditWorkoutDocument, baseOptions);\n}\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  return Apollo.useMutation(ForgotPasswordDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\nexport const ExoDocument = gql`\n    query Exo {\n  exo {\n    id\n    exoDesc\n    bodyPart\n    langCd\n  }\n}\n    `;\n/**\n * __useExoQuery__\n *\n * To run a query within a React component, call `useExoQuery` and pass it any options that fit your needs.\n * When your component renders, `useExoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExoQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useExoQuery(baseOptions) {\n  return Apollo.useQuery(ExoDocument, baseOptions);\n}\nexport function useExoLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(ExoDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport const WorkoutDocument = gql`\n    query Workout($workoutId: Int!) {\n  workout(workoutId: $workoutId) {\n    id\n    workoutDt\n    createdAt\n    updatedAt\n    workoutType\n    workoutDesc\n    weekNb\n    workoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n/**\n * __useWorkoutQuery__\n *\n * To run a query within a React component, call `useWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutQuery({\n *   variables: {\n *      workoutId: // value for 'workoutId'\n *   },\n * });\n */\n\nexport function useWorkoutQuery(baseOptions) {\n  return Apollo.useQuery(WorkoutDocument, baseOptions);\n}\nexport function useWorkoutLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(WorkoutDocument, baseOptions);\n}\nexport const WorkoutsDocument = gql`\n    query Workouts($sens: Int, $cursor: String) {\n  workouts(sens: $sens, cursor: $cursor) {\n    hasMorePrev\n    hasMoreNext\n    weekNb\n    nextCursorValue\n    workouts {\n      id\n      workoutDt\n      createdAt\n      updatedAt\n      workoutType\n      workoutDesc\n      weekNb\n      workoutDetails {\n        id\n        exoId\n        exoDetail {\n          sets\n          feedback\n          reps\n          grade\n          rest\n          weight\n        }\n      }\n    }\n  }\n}\n    `;\n/**\n * __useWorkoutsQuery__\n *\n * To run a query within a React component, call `useWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutsQuery({\n *   variables: {\n *      sens: // value for 'sens'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useWorkoutsQuery(baseOptions) {\n  return Apollo.useQuery(WorkoutsDocument, baseOptions);\n}\nexport function useWorkoutsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(WorkoutsDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/generated/graphql.tsx"],"names":["gql","Apollo","RegularErrorFragmentDoc","RegularWorkoutFragmentDoc","RegularWorkoutResponseFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","ChangePasswordDocument","useChangePasswordMutation","baseOptions","useMutation","ChangeProfileDocument","useChangeProfileMutation","CreateWorkoutDocument","useCreateWorkoutMutation","DeleteWorkoutDocument","useDeleteWorkoutMutation","EditWorkoutDocument","useEditWorkoutMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","ExoDocument","useExoQuery","useQuery","useExoLazyQuery","useLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","WorkoutDocument","useWorkoutQuery","useWorkoutLazyQuery","WorkoutsDocument","useWorkoutsQuery","useWorkoutsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  workout?: Maybe<Workout>;\n  workouts?: Maybe<PaginatedWorkout>;\n  exo?: Maybe<Array<Exo>>;\n};\n\n\nexport type QueryWorkoutArgs = {\n  workoutId: Scalars['Int'];\n};\n\n\nexport type QueryWorkoutsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  sens?: Maybe<Scalars['Int']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  profile?: Maybe<Profile>;\n};\n\nexport type Profile = {\n  __typename?: 'Profile';\n  id: Scalars['Float'];\n  lang_cd: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  trainingType: Scalars['String'];\n  sex: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Workout = {\n  __typename?: 'Workout';\n  id: Scalars['Float'];\n  userId: Scalars['Float'];\n  workoutDt: Scalars['DateTime'];\n  workoutType: Scalars['String'];\n  workoutDesc?: Maybe<Scalars['String']>;\n  workoutDetails?: Maybe<Array<WorkoutDetail>>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  weekNb: Scalars['String'];\n};\n\n\nexport type WorkoutDetail = {\n  __typename?: 'WorkoutDetail';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDetail: Array<ExoDetails>;\n  workoutId: Scalars['Int'];\n  workout: Workout;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type ExoDetails = {\n  __typename?: 'exoDetails';\n  sets: Scalars['Float'];\n  reps: Scalars['Float'];\n  weight: Scalars['Float'];\n  grade: Scalars['Float'];\n  rest?: Maybe<Scalars['Float']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type PaginatedWorkout = {\n  __typename?: 'PaginatedWorkout';\n  workouts: Array<Workout>;\n  hasMorePrev: Scalars['Boolean'];\n  hasMoreNext: Scalars['Boolean'];\n  weekNb: Scalars['String'];\n  nextCursorValue: Scalars['String'];\n};\n\nexport type Exo = {\n  __typename?: 'Exo';\n  id: Scalars['Float'];\n  exoDesc: Scalars['String'];\n  langCd: Scalars['String'];\n  bodyPart: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  changeProfile: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createWorkout: WorkoutResponse;\n  editWorkout: WorkoutResponse;\n  deleteWorkout: Scalars['Boolean'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationChangeProfileArgs = {\n  options: ProfileInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\n\nexport type MutationCreateWorkoutArgs = {\n  options: WorkoutInput;\n};\n\n\nexport type MutationEditWorkoutArgs = {\n  options: WorkoutInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteWorkoutArgs = {\n  id: Scalars['Int'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type ProfileInput = {\n  lang_cd: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  trainingType: Scalars['String'];\n  sex: Scalars['String'];\n};\n\nexport type WorkoutResponse = {\n  __typename?: 'WorkoutResponse';\n  errors?: Maybe<Array<FieldError>>;\n  workout?: Maybe<Workout>;\n};\n\nexport type WorkoutInput = {\n  workoutDt: Scalars['DateTime'];\n  workoutType: Scalars['String'];\n  workoutDesc?: Maybe<Scalars['String']>;\n  workoutDetails: Array<WorkoutDetailInput>;\n};\n\nexport type WorkoutDetailInput = {\n  exoId: Scalars['String'];\n  exoDetail: Array<ExoDetailsInput>;\n};\n\nexport type ExoDetailsInput = {\n  sets: Scalars['Float'];\n  reps: Scalars['Float'];\n  weight: Scalars['Float'];\n  grade: Scalars['Float'];\n  rest?: Maybe<Scalars['Float']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n);\n\nexport type RegularWorkoutFragment = (\n  { __typename?: 'Workout' }\n  & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n  & { workoutDetails?: Maybe<Array<(\n    { __typename?: 'WorkoutDetail' }\n    & Pick<WorkoutDetail, 'id' | 'exoId'>\n    & { exoDetail: Array<(\n      { __typename?: 'exoDetails' }\n      & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n    )> }\n  )>> }\n);\n\nexport type RegularWorkoutResponseFragment = (\n  { __typename?: 'WorkoutResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, workout?: Maybe<(\n    { __typename?: 'Workout' }\n    & RegularWorkoutFragment\n  )> }\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ChangePasswordMutationVariables = Exact<{\n  token: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type ChangePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { changePassword: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type ChangeProfileMutationVariables = Exact<{\n  options: ProfileInput;\n}>;\n\n\nexport type ChangeProfileMutation = (\n  { __typename?: 'Mutation' }\n  & { changeProfile: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type CreateWorkoutMutationVariables = Exact<{\n  options: WorkoutInput;\n}>;\n\n\nexport type CreateWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & { createWorkout: (\n    { __typename?: 'WorkoutResponse' }\n    & RegularWorkoutResponseFragment\n  ) }\n);\n\nexport type DeleteWorkoutMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteWorkout'>\n);\n\nexport type EditWorkoutMutationVariables = Exact<{\n  id: Scalars['Int'];\n  options: WorkoutInput;\n}>;\n\n\nexport type EditWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & { editWorkout: (\n    { __typename?: 'WorkoutResponse' }\n    & RegularWorkoutResponseFragment\n  ) }\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type ExoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ExoQuery = (\n  { __typename?: 'Query' }\n  & { exo?: Maybe<Array<(\n    { __typename?: 'Exo' }\n    & Pick<Exo, 'id' | 'exoDesc' | 'bodyPart' | 'langCd'>\n  )>> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type WorkoutQueryVariables = Exact<{\n  workoutId: Scalars['Int'];\n}>;\n\n\nexport type WorkoutQuery = (\n  { __typename?: 'Query' }\n  & { workout?: Maybe<(\n    { __typename?: 'Workout' }\n    & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n    & { workoutDetails?: Maybe<Array<(\n      { __typename?: 'WorkoutDetail' }\n      & Pick<WorkoutDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )>> }\n  )> }\n);\n\nexport type WorkoutsQueryVariables = Exact<{\n  sens?: Maybe<Scalars['Int']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WorkoutsQuery = (\n  { __typename?: 'Query' }\n  & { workouts?: Maybe<(\n    { __typename?: 'PaginatedWorkout' }\n    & Pick<PaginatedWorkout, 'hasMorePrev' | 'hasMoreNext' | 'weekNb' | 'nextCursorValue'>\n    & { workouts: Array<(\n      { __typename?: 'Workout' }\n      & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n      & { workoutDetails?: Maybe<Array<(\n        { __typename?: 'WorkoutDetail' }\n        & Pick<WorkoutDetail, 'id' | 'exoId'>\n        & { exoDetail: Array<(\n          { __typename?: 'exoDetails' }\n          & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n        )> }\n      )>> }\n    )> }\n  )> }\n);\n\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularWorkoutFragmentDoc = gql`\n    fragment RegularWorkout on Workout {\n  id\n  workoutDt\n  createdAt\n  updatedAt\n  workoutType\n  workoutDesc\n  weekNb\n  workoutDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularWorkoutResponseFragmentDoc = gql`\n    fragment RegularWorkoutResponse on WorkoutResponse {\n  errors {\n    ...RegularError\n  }\n  workout {\n    ...RegularWorkout\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularWorkoutFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {\n        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, baseOptions);\n      }\nexport type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;\nexport type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;\nexport type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;\nexport const ChangeProfileDocument = gql`\n    mutation ChangeProfile($options: ProfileInput!) {\n  changeProfile(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangeProfileMutationFn = Apollo.MutationFunction<ChangeProfileMutation, ChangeProfileMutationVariables>;\n\n/**\n * __useChangeProfileMutation__\n *\n * To run a mutation, you first call `useChangeProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeProfileMutation, { data, loading, error }] = useChangeProfileMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useChangeProfileMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProfileMutation, ChangeProfileMutationVariables>) {\n        return Apollo.useMutation<ChangeProfileMutation, ChangeProfileMutationVariables>(ChangeProfileDocument, baseOptions);\n      }\nexport type ChangeProfileMutationHookResult = ReturnType<typeof useChangeProfileMutation>;\nexport type ChangeProfileMutationResult = Apollo.MutationResult<ChangeProfileMutation>;\nexport type ChangeProfileMutationOptions = Apollo.BaseMutationOptions<ChangeProfileMutation, ChangeProfileMutationVariables>;\nexport const CreateWorkoutDocument = gql`\n    mutation CreateWorkout($options: WorkoutInput!) {\n  createWorkout(options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\nexport type CreateWorkoutMutationFn = Apollo.MutationFunction<CreateWorkoutMutation, CreateWorkoutMutationVariables>;\n\n/**\n * __useCreateWorkoutMutation__\n *\n * To run a mutation, you first call `useCreateWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWorkoutMutation, { data, loading, error }] = useCreateWorkoutMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<CreateWorkoutMutation, CreateWorkoutMutationVariables>) {\n        return Apollo.useMutation<CreateWorkoutMutation, CreateWorkoutMutationVariables>(CreateWorkoutDocument, baseOptions);\n      }\nexport type CreateWorkoutMutationHookResult = ReturnType<typeof useCreateWorkoutMutation>;\nexport type CreateWorkoutMutationResult = Apollo.MutationResult<CreateWorkoutMutation>;\nexport type CreateWorkoutMutationOptions = Apollo.BaseMutationOptions<CreateWorkoutMutation, CreateWorkoutMutationVariables>;\nexport const DeleteWorkoutDocument = gql`\n    mutation DeleteWorkout($id: Int!) {\n  deleteWorkout(id: $id)\n}\n    `;\nexport type DeleteWorkoutMutationFn = Apollo.MutationFunction<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>;\n\n/**\n * __useDeleteWorkoutMutation__\n *\n * To run a mutation, you first call `useDeleteWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkoutMutation, { data, loading, error }] = useDeleteWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>) {\n        return Apollo.useMutation<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>(DeleteWorkoutDocument, baseOptions);\n      }\nexport type DeleteWorkoutMutationHookResult = ReturnType<typeof useDeleteWorkoutMutation>;\nexport type DeleteWorkoutMutationResult = Apollo.MutationResult<DeleteWorkoutMutation>;\nexport type DeleteWorkoutMutationOptions = Apollo.BaseMutationOptions<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>;\nexport const EditWorkoutDocument = gql`\n    mutation EditWorkout($id: Int!, $options: WorkoutInput!) {\n  editWorkout(id: $id, options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\nexport type EditWorkoutMutationFn = Apollo.MutationFunction<EditWorkoutMutation, EditWorkoutMutationVariables>;\n\n/**\n * __useEditWorkoutMutation__\n *\n * To run a mutation, you first call `useEditWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkoutMutation, { data, loading, error }] = useEditWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<EditWorkoutMutation, EditWorkoutMutationVariables>) {\n        return Apollo.useMutation<EditWorkoutMutation, EditWorkoutMutationVariables>(EditWorkoutDocument, baseOptions);\n      }\nexport type EditWorkoutMutationHookResult = ReturnType<typeof useEditWorkoutMutation>;\nexport type EditWorkoutMutationResult = Apollo.MutationResult<EditWorkoutMutation>;\nexport type EditWorkoutMutationOptions = Apollo.BaseMutationOptions<EditWorkoutMutation, EditWorkoutMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const ExoDocument = gql`\n    query Exo {\n  exo {\n    id\n    exoDesc\n    bodyPart\n    langCd\n  }\n}\n    `;\n\n/**\n * __useExoQuery__\n *\n * To run a query within a React component, call `useExoQuery` and pass it any options that fit your needs.\n * When your component renders, `useExoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExoQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useExoQuery(baseOptions?: Apollo.QueryHookOptions<ExoQuery, ExoQueryVariables>) {\n        return Apollo.useQuery<ExoQuery, ExoQueryVariables>(ExoDocument, baseOptions);\n      }\nexport function useExoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ExoQuery, ExoQueryVariables>) {\n          return Apollo.useLazyQuery<ExoQuery, ExoQueryVariables>(ExoDocument, baseOptions);\n        }\nexport type ExoQueryHookResult = ReturnType<typeof useExoQuery>;\nexport type ExoLazyQueryHookResult = ReturnType<typeof useExoLazyQuery>;\nexport type ExoQueryResult = Apollo.QueryResult<ExoQuery, ExoQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const WorkoutDocument = gql`\n    query Workout($workoutId: Int!) {\n  workout(workoutId: $workoutId) {\n    id\n    workoutDt\n    createdAt\n    updatedAt\n    workoutType\n    workoutDesc\n    weekNb\n    workoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkoutQuery__\n *\n * To run a query within a React component, call `useWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutQuery({\n *   variables: {\n *      workoutId: // value for 'workoutId'\n *   },\n * });\n */\nexport function useWorkoutQuery(baseOptions: Apollo.QueryHookOptions<WorkoutQuery, WorkoutQueryVariables>) {\n        return Apollo.useQuery<WorkoutQuery, WorkoutQueryVariables>(WorkoutDocument, baseOptions);\n      }\nexport function useWorkoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkoutQuery, WorkoutQueryVariables>) {\n          return Apollo.useLazyQuery<WorkoutQuery, WorkoutQueryVariables>(WorkoutDocument, baseOptions);\n        }\nexport type WorkoutQueryHookResult = ReturnType<typeof useWorkoutQuery>;\nexport type WorkoutLazyQueryHookResult = ReturnType<typeof useWorkoutLazyQuery>;\nexport type WorkoutQueryResult = Apollo.QueryResult<WorkoutQuery, WorkoutQueryVariables>;\nexport const WorkoutsDocument = gql`\n    query Workouts($sens: Int, $cursor: String) {\n  workouts(sens: $sens, cursor: $cursor) {\n    hasMorePrev\n    hasMoreNext\n    weekNb\n    nextCursorValue\n    workouts {\n      id\n      workoutDt\n      createdAt\n      updatedAt\n      workoutType\n      workoutDesc\n      weekNb\n      workoutDetails {\n        id\n        exoId\n        exoDetail {\n          sets\n          feedback\n          reps\n          grade\n          rest\n          weight\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkoutsQuery__\n *\n * To run a query within a React component, call `useWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutsQuery({\n *   variables: {\n *      sens: // value for 'sens'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useWorkoutsQuery(baseOptions?: Apollo.QueryHookOptions<WorkoutsQuery, WorkoutsQueryVariables>) {\n        return Apollo.useQuery<WorkoutsQuery, WorkoutsQueryVariables>(WorkoutsDocument, baseOptions);\n      }\nexport function useWorkoutsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkoutsQuery, WorkoutsQueryVariables>) {\n          return Apollo.useLazyQuery<WorkoutsQuery, WorkoutsQueryVariables>(WorkoutsDocument, baseOptions);\n        }\nexport type WorkoutsQueryHookResult = ReturnType<typeof useWorkoutsQuery>;\nexport type WorkoutsLazyQueryHookResult = ReturnType<typeof useWorkoutsLazyQuery>;\nexport type WorkoutsQueryResult = Apollo.QueryResult<WorkoutsQuery, WorkoutsQueryVariables>;"]},"metadata":{},"sourceType":"module"}