{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$(),\n    _s22 = $RefreshSig$(),\n    _s23 = $RefreshSig$(),\n    _s24 = $RefreshSig$();\n\nfunction _templateObject26() {\n  var data = _taggedTemplateLiteral([\"\\n    query Workouts($sens: Int, $cursor: String) {\\n  workouts(sens: $sens, cursor: $cursor) {\\n    hasMorePrev\\n    hasMoreNext\\n    weekNb\\n    nextCursorValue\\n    workouts {\\n      id\\n      workoutDt\\n      createdAt\\n      updatedAt\\n      workoutType\\n      workoutDesc\\n      weekNb\\n      workoutDetails {\\n        id\\n        exoId\\n        exoDetail {\\n          sets\\n          feedback\\n          reps\\n          grade\\n          rest\\n          weight\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject26 = function _templateObject26() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject25() {\n  var data = _taggedTemplateLiteral([\"\\n    query Workout($workoutId: Int!) {\\n  workout(workoutId: $workoutId) {\\n    id\\n    workoutDt\\n    createdAt\\n    updatedAt\\n    workoutType\\n    workoutDesc\\n    weekNb\\n    workoutDetails {\\n      id\\n      exoId\\n      exoDetail {\\n        sets\\n        feedback\\n        reps\\n        grade\\n        rest\\n        weight\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject25 = function _templateObject25() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject24() {\n  var data = _taggedTemplateLiteral([\"\\n    query Templates {\\n  templates {\\n    id\\n    templateType\\n    name\\n    templateDetails {\\n      id\\n      exoId\\n      exoDetail {\\n        sets\\n        feedback\\n        reps\\n        grade\\n        rest\\n        weight\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject24 = function _templateObject24() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject23() {\n  var data = _taggedTemplateLiteral([\"\\n    query Template($templateId: Int!) {\\n  template(templateId: $templateId) {\\n    id\\n    templateType\\n    name\\n    templateDetails {\\n      id\\n      exoId\\n      exoDetail {\\n        sets\\n        feedback\\n        reps\\n        grade\\n        rest\\n        weight\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject23 = function _templateObject23() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject22() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    ...RegularUser\\n    profile {\\n      ...RegularProfile\\n    }\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject22 = function _templateObject22() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject21() {\n  var data = _taggedTemplateLiteral([\"\\n    query Exo {\\n  exo {\\n    id\\n    exoId\\n    exoDesc\\n    bodyPart\\n    langCd\\n  }\\n}\\n    \"]);\n\n  _templateObject21 = function _templateObject21() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject20() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject20 = function _templateObject20() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject19() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject19 = function _templateObject19() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject18() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($usernameOrEmail: String!, $password: String!) {\\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject18 = function _templateObject18() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ForgotPassword($email: String!) {\\n  forgotPassword(email: $email)\\n}\\n    \"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation EditWorkout($id: Int!, $options: WorkoutInput!) {\\n  editWorkout(id: $id, options: $options) {\\n    ...RegularWorkoutResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation EditTemplate($id: Int!, $options: TemplateInput!) {\\n  editTemplate(id: $id, options: $options) {\\n    ...RegularTemplateResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteWorkout($id: Int!) {\\n  deleteWorkout(id: $id)\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteTemplate($id: Int!) {\\n  deleteTemplate(id: $id)\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateWorkout($options: WorkoutInput!) {\\n  createWorkout(options: $options) {\\n    ...RegularWorkoutResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateTemplate($options: TemplateInput!) {\\n  createTemplate(options: $options) {\\n    ...RegularTemplateResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ChangeProfile($options: ProfileInput!) {\\n  changeProfile(options: $options) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ChangePassword($token: String!, $newPassword: String!) {\\n  changePassword(token: $token, newPassword: $newPassword) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUserResponse on UserResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  user {\\n    ...RegularUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUser on User {\\n  id\\n  username\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularWorkoutResponse on WorkoutResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  workout {\\n    ...RegularWorkout\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularWorkout on Workout {\\n  id\\n  workoutDt\\n  createdAt\\n  updatedAt\\n  workoutType\\n  workoutDesc\\n  weekNb\\n  workoutDetails {\\n    id\\n    exoId\\n    exoDetail {\\n      sets\\n      feedback\\n      reps\\n      grade\\n      rest\\n      weight\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularTemplateResponse on TemplateResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  template {\\n    ...RegularTemplate\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularTemplate on Template {\\n  id\\n  templateType\\n  name\\n  templateDetails {\\n    id\\n    exoId\\n    exoDetail {\\n      sets\\n      feedback\\n      reps\\n      grade\\n      rest\\n      weight\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularProfile on Profile {\\n  lang_cd\\n  sex\\n  trainingFrequency\\n  trainingType\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var RegularProfileFragmentDoc = gql(_templateObject());\nexport var RegularErrorFragmentDoc = gql(_templateObject2());\nexport var RegularTemplateFragmentDoc = gql(_templateObject3());\nexport var RegularTemplateResponseFragmentDoc = gql(_templateObject4(), RegularErrorFragmentDoc, RegularTemplateFragmentDoc);\nexport var RegularWorkoutFragmentDoc = gql(_templateObject5());\nexport var RegularWorkoutResponseFragmentDoc = gql(_templateObject6(), RegularErrorFragmentDoc, RegularWorkoutFragmentDoc);\nexport var RegularUserFragmentDoc = gql(_templateObject7());\nexport var RegularUserResponseFragmentDoc = gql(_templateObject8(), RegularErrorFragmentDoc, RegularUserFragmentDoc);\nexport var ChangePasswordDocument = gql(_templateObject9(), RegularUserResponseFragmentDoc);\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions) {\n  _s();\n\n  return Apollo.useMutation(ChangePasswordDocument, baseOptions);\n}\n\n_s(useChangePasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ChangeProfileDocument = gql(_templateObject10(), RegularUserResponseFragmentDoc);\n\n/**\n * __useChangeProfileMutation__\n *\n * To run a mutation, you first call `useChangeProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeProfileMutation, { data, loading, error }] = useChangeProfileMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useChangeProfileMutation(baseOptions) {\n  _s2();\n\n  return Apollo.useMutation(ChangeProfileDocument, baseOptions);\n}\n\n_s2(useChangeProfileMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateTemplateDocument = gql(_templateObject11(), RegularTemplateResponseFragmentDoc);\n\n/**\n * __useCreateTemplateMutation__\n *\n * To run a mutation, you first call `useCreateTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTemplateMutation, { data, loading, error }] = useCreateTemplateMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateTemplateMutation(baseOptions) {\n  _s3();\n\n  return Apollo.useMutation(CreateTemplateDocument, baseOptions);\n}\n\n_s3(useCreateTemplateMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateWorkoutDocument = gql(_templateObject12(), RegularWorkoutResponseFragmentDoc);\n\n/**\n * __useCreateWorkoutMutation__\n *\n * To run a mutation, you first call `useCreateWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWorkoutMutation, { data, loading, error }] = useCreateWorkoutMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateWorkoutMutation(baseOptions) {\n  _s4();\n\n  return Apollo.useMutation(CreateWorkoutDocument, baseOptions);\n}\n\n_s4(useCreateWorkoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteTemplateDocument = gql(_templateObject13());\n\n/**\n * __useDeleteTemplateMutation__\n *\n * To run a mutation, you first call `useDeleteTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTemplateMutation, { data, loading, error }] = useDeleteTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTemplateMutation(baseOptions) {\n  _s5();\n\n  return Apollo.useMutation(DeleteTemplateDocument, baseOptions);\n}\n\n_s5(useDeleteTemplateMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteWorkoutDocument = gql(_templateObject14());\n\n/**\n * __useDeleteWorkoutMutation__\n *\n * To run a mutation, you first call `useDeleteWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkoutMutation, { data, loading, error }] = useDeleteWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkoutMutation(baseOptions) {\n  _s6();\n\n  return Apollo.useMutation(DeleteWorkoutDocument, baseOptions);\n}\n\n_s6(useDeleteWorkoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var EditTemplateDocument = gql(_templateObject15(), RegularTemplateResponseFragmentDoc);\n\n/**\n * __useEditTemplateMutation__\n *\n * To run a mutation, you first call `useEditTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTemplateMutation, { data, loading, error }] = useEditTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditTemplateMutation(baseOptions) {\n  _s7();\n\n  return Apollo.useMutation(EditTemplateDocument, baseOptions);\n}\n\n_s7(useEditTemplateMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var EditWorkoutDocument = gql(_templateObject16(), RegularWorkoutResponseFragmentDoc);\n\n/**\n * __useEditWorkoutMutation__\n *\n * To run a mutation, you first call `useEditWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkoutMutation, { data, loading, error }] = useEditWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditWorkoutMutation(baseOptions) {\n  _s8();\n\n  return Apollo.useMutation(EditWorkoutDocument, baseOptions);\n}\n\n_s8(useEditWorkoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ForgotPasswordDocument = gql(_templateObject17());\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  _s9();\n\n  return Apollo.useMutation(ForgotPasswordDocument, baseOptions);\n}\n\n_s9(useForgotPasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject18(), RegularUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s10();\n\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\n\n_s10(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject19());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s11();\n\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\n\n_s11(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var RegisterDocument = gql(_templateObject20(), RegularUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  _s12();\n\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\n\n_s12(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ExoDocument = gql(_templateObject21());\n/**\n * __useExoQuery__\n *\n * To run a query within a React component, call `useExoQuery` and pass it any options that fit your needs.\n * When your component renders, `useExoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExoQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useExoQuery(baseOptions) {\n  _s13();\n\n  return Apollo.useQuery(ExoDocument, baseOptions);\n}\n\n_s13(useExoQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useExoLazyQuery(baseOptions) {\n  _s14();\n\n  return Apollo.useLazyQuery(ExoDocument, baseOptions);\n}\n\n_s14(useExoLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var MeDocument = gql(_templateObject22(), RegularUserFragmentDoc, RegularProfileFragmentDoc);\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s15();\n\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\n\n_s15(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s16();\n\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\n\n_s16(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var TemplateDocument = gql(_templateObject23());\n/**\n * __useTemplateQuery__\n *\n * To run a query within a React component, call `useTemplateQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplateQuery({\n *   variables: {\n *      templateId: // value for 'templateId'\n *   },\n * });\n */\n\nexport function useTemplateQuery(baseOptions) {\n  _s17();\n\n  return Apollo.useQuery(TemplateDocument, baseOptions);\n}\n\n_s17(useTemplateQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useTemplateLazyQuery(baseOptions) {\n  _s18();\n\n  return Apollo.useLazyQuery(TemplateDocument, baseOptions);\n}\n\n_s18(useTemplateLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var TemplatesDocument = gql(_templateObject24());\n/**\n * __useTemplatesQuery__\n *\n * To run a query within a React component, call `useTemplatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplatesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTemplatesQuery(baseOptions) {\n  _s19();\n\n  return Apollo.useQuery(TemplatesDocument, baseOptions);\n}\n\n_s19(useTemplatesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useTemplatesLazyQuery(baseOptions) {\n  _s20();\n\n  return Apollo.useLazyQuery(TemplatesDocument, baseOptions);\n}\n\n_s20(useTemplatesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var WorkoutDocument = gql(_templateObject25());\n/**\n * __useWorkoutQuery__\n *\n * To run a query within a React component, call `useWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutQuery({\n *   variables: {\n *      workoutId: // value for 'workoutId'\n *   },\n * });\n */\n\nexport function useWorkoutQuery(baseOptions) {\n  _s21();\n\n  return Apollo.useQuery(WorkoutDocument, baseOptions);\n}\n\n_s21(useWorkoutQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useWorkoutLazyQuery(baseOptions) {\n  _s22();\n\n  return Apollo.useLazyQuery(WorkoutDocument, baseOptions);\n}\n\n_s22(useWorkoutLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var WorkoutsDocument = gql(_templateObject26());\n/**\n * __useWorkoutsQuery__\n *\n * To run a query within a React component, call `useWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutsQuery({\n *   variables: {\n *      sens: // value for 'sens'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useWorkoutsQuery(baseOptions) {\n  _s23();\n\n  return Apollo.useQuery(WorkoutsDocument, baseOptions);\n}\n\n_s23(useWorkoutsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useWorkoutsLazyQuery(baseOptions) {\n  _s24();\n\n  return Apollo.useLazyQuery(WorkoutsDocument, baseOptions);\n}\n\n_s24(useWorkoutsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/generated/graphql.tsx"],"names":["gql","Apollo","RegularProfileFragmentDoc","RegularErrorFragmentDoc","RegularTemplateFragmentDoc","RegularTemplateResponseFragmentDoc","RegularWorkoutFragmentDoc","RegularWorkoutResponseFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","ChangePasswordDocument","useChangePasswordMutation","baseOptions","useMutation","ChangeProfileDocument","useChangeProfileMutation","CreateTemplateDocument","useCreateTemplateMutation","CreateWorkoutDocument","useCreateWorkoutMutation","DeleteTemplateDocument","useDeleteTemplateMutation","DeleteWorkoutDocument","useDeleteWorkoutMutation","EditTemplateDocument","useEditTemplateMutation","EditWorkoutDocument","useEditWorkoutMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","ExoDocument","useExoQuery","useQuery","useExoLazyQuery","useLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","TemplateDocument","useTemplateQuery","useTemplateLazyQuery","TemplatesDocument","useTemplatesQuery","useTemplatesLazyQuery","WorkoutDocument","useWorkoutQuery","useWorkoutLazyQuery","WorkoutsDocument","useWorkoutsQuery","useWorkoutsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  workout?: Maybe<Workout>;\n  workouts?: Maybe<PaginatedWorkout>;\n  exo?: Maybe<Array<Exo>>;\n  template?: Maybe<Template>;\n  templates?: Maybe<Array<Template>>;\n};\n\n\nexport type QueryWorkoutArgs = {\n  workoutId: Scalars['Int'];\n};\n\n\nexport type QueryWorkoutsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  sens?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTemplateArgs = {\n  templateId: Scalars['Int'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  profile?: Maybe<Profile>;\n};\n\nexport type Profile = {\n  __typename?: 'Profile';\n  id: Scalars['Float'];\n  lang_cd: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  trainingType: Scalars['String'];\n  sex: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Workout = {\n  __typename?: 'Workout';\n  id: Scalars['Float'];\n  userId: Scalars['Float'];\n  workoutDt: Scalars['DateTime'];\n  workoutType: Scalars['String'];\n  workoutDesc?: Maybe<Scalars['String']>;\n  workoutDetails?: Maybe<Array<WorkoutDetail>>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  weekNb: Scalars['String'];\n};\n\n\nexport type WorkoutDetail = {\n  __typename?: 'WorkoutDetail';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDetail: Array<ExoDetails>;\n  workoutId: Scalars['Int'];\n  workout: Workout;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type ExoDetails = {\n  __typename?: 'exoDetails';\n  sets: Scalars['Float'];\n  reps: Scalars['Float'];\n  weight: Scalars['Float'];\n  grade: Scalars['Float'];\n  rest?: Maybe<Scalars['Float']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type PaginatedWorkout = {\n  __typename?: 'PaginatedWorkout';\n  workouts: Array<Workout>;\n  hasMorePrev: Scalars['Boolean'];\n  hasMoreNext: Scalars['Boolean'];\n  weekNb: Scalars['String'];\n  nextCursorValue: Scalars['String'];\n};\n\nexport type Exo = {\n  __typename?: 'Exo';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDesc: Scalars['String'];\n  langCd: Scalars['String'];\n  bodyPart: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Template = {\n  __typename?: 'Template';\n  id: Scalars['Float'];\n  userId: Scalars['Float'];\n  name: Scalars['String'];\n  templateType: Scalars['String'];\n  templateDetails: Array<TemplateDetail>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type TemplateDetail = {\n  __typename?: 'TemplateDetail';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDetail: Array<ExoDetails>;\n  templateId: Scalars['Float'];\n  template: Template;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  changeProfile: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createWorkout: WorkoutResponse;\n  editWorkout: WorkoutResponse;\n  deleteWorkout: Scalars['Boolean'];\n  createTemplate: TemplateResponse;\n  editTemplate: TemplateResponse;\n  deleteTemplate: Scalars['Boolean'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationChangeProfileArgs = {\n  options: ProfileInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\n\nexport type MutationCreateWorkoutArgs = {\n  options: WorkoutInput;\n};\n\n\nexport type MutationEditWorkoutArgs = {\n  options: WorkoutInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteWorkoutArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateTemplateArgs = {\n  options: TemplateInput;\n};\n\n\nexport type MutationEditTemplateArgs = {\n  options: TemplateInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteTemplateArgs = {\n  id: Scalars['Int'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type ProfileInput = {\n  lang_cd: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  trainingType: Scalars['String'];\n  sex: Scalars['String'];\n};\n\nexport type WorkoutResponse = {\n  __typename?: 'WorkoutResponse';\n  errors?: Maybe<Array<FieldError>>;\n  workout?: Maybe<Workout>;\n};\n\nexport type WorkoutInput = {\n  workoutDt: Scalars['DateTime'];\n  workoutType: Scalars['String'];\n  workoutDesc?: Maybe<Scalars['String']>;\n  workoutDetails: Array<WorkoutDetailInput>;\n};\n\nexport type WorkoutDetailInput = {\n  exoId: Scalars['String'];\n  exoDetail: Array<ExoDetailsInput>;\n};\n\nexport type ExoDetailsInput = {\n  sets: Scalars['Float'];\n  reps: Scalars['Float'];\n  weight: Scalars['Float'];\n  grade: Scalars['Float'];\n  rest?: Maybe<Scalars['Float']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type TemplateResponse = {\n  __typename?: 'TemplateResponse';\n  errors?: Maybe<Array<FieldError>>;\n  template?: Maybe<Template>;\n};\n\nexport type TemplateInput = {\n  templateType: Scalars['String'];\n  name: Scalars['String'];\n  templateDetails: Array<TemplateDetailInput>;\n};\n\nexport type TemplateDetailInput = {\n  exoId: Scalars['String'];\n  exoDetail: Array<ExoDetailsInput>;\n};\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularProfileFragment = (\n  { __typename?: 'Profile' }\n  & Pick<Profile, 'lang_cd' | 'sex' | 'trainingFrequency' | 'trainingType'>\n);\n\nexport type RegularTemplateFragment = (\n  { __typename?: 'Template' }\n  & Pick<Template, 'id' | 'templateType' | 'name'>\n  & { templateDetails: Array<(\n    { __typename?: 'TemplateDetail' }\n    & Pick<TemplateDetail, 'id' | 'exoId'>\n    & { exoDetail: Array<(\n      { __typename?: 'exoDetails' }\n      & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n    )> }\n  )> }\n);\n\nexport type RegularTemplateResponseFragment = (\n  { __typename?: 'TemplateResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, template?: Maybe<(\n    { __typename?: 'Template' }\n    & RegularTemplateFragment\n  )> }\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n);\n\nexport type RegularWorkoutFragment = (\n  { __typename?: 'Workout' }\n  & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n  & { workoutDetails?: Maybe<Array<(\n    { __typename?: 'WorkoutDetail' }\n    & Pick<WorkoutDetail, 'id' | 'exoId'>\n    & { exoDetail: Array<(\n      { __typename?: 'exoDetails' }\n      & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n    )> }\n  )>> }\n);\n\nexport type RegularWorkoutResponseFragment = (\n  { __typename?: 'WorkoutResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, workout?: Maybe<(\n    { __typename?: 'Workout' }\n    & RegularWorkoutFragment\n  )> }\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ChangePasswordMutationVariables = Exact<{\n  token: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type ChangePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { changePassword: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type ChangeProfileMutationVariables = Exact<{\n  options: ProfileInput;\n}>;\n\n\nexport type ChangeProfileMutation = (\n  { __typename?: 'Mutation' }\n  & { changeProfile: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type CreateTemplateMutationVariables = Exact<{\n  options: TemplateInput;\n}>;\n\n\nexport type CreateTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & { createTemplate: (\n    { __typename?: 'TemplateResponse' }\n    & RegularTemplateResponseFragment\n  ) }\n);\n\nexport type CreateWorkoutMutationVariables = Exact<{\n  options: WorkoutInput;\n}>;\n\n\nexport type CreateWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & { createWorkout: (\n    { __typename?: 'WorkoutResponse' }\n    & RegularWorkoutResponseFragment\n  ) }\n);\n\nexport type DeleteTemplateMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTemplate'>\n);\n\nexport type DeleteWorkoutMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteWorkout'>\n);\n\nexport type EditTemplateMutationVariables = Exact<{\n  id: Scalars['Int'];\n  options: TemplateInput;\n}>;\n\n\nexport type EditTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & { editTemplate: (\n    { __typename?: 'TemplateResponse' }\n    & RegularTemplateResponseFragment\n  ) }\n);\n\nexport type EditWorkoutMutationVariables = Exact<{\n  id: Scalars['Int'];\n  options: WorkoutInput;\n}>;\n\n\nexport type EditWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & { editWorkout: (\n    { __typename?: 'WorkoutResponse' }\n    & RegularWorkoutResponseFragment\n  ) }\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type ExoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ExoQuery = (\n  { __typename?: 'Query' }\n  & { exo?: Maybe<Array<(\n    { __typename?: 'Exo' }\n    & Pick<Exo, 'id' | 'exoId' | 'exoDesc' | 'bodyPart' | 'langCd'>\n  )>> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & { profile?: Maybe<(\n      { __typename?: 'Profile' }\n      & RegularProfileFragment\n    )> }\n    & RegularUserFragment\n  )> }\n);\n\nexport type TemplateQueryVariables = Exact<{\n  templateId: Scalars['Int'];\n}>;\n\n\nexport type TemplateQuery = (\n  { __typename?: 'Query' }\n  & { template?: Maybe<(\n    { __typename?: 'Template' }\n    & Pick<Template, 'id' | 'templateType' | 'name'>\n    & { templateDetails: Array<(\n      { __typename?: 'TemplateDetail' }\n      & Pick<TemplateDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type TemplatesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TemplatesQuery = (\n  { __typename?: 'Query' }\n  & { templates?: Maybe<Array<(\n    { __typename?: 'Template' }\n    & Pick<Template, 'id' | 'templateType' | 'name'>\n    & { templateDetails: Array<(\n      { __typename?: 'TemplateDetail' }\n      & Pick<TemplateDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )> }\n  )>> }\n);\n\nexport type WorkoutQueryVariables = Exact<{\n  workoutId: Scalars['Int'];\n}>;\n\n\nexport type WorkoutQuery = (\n  { __typename?: 'Query' }\n  & { workout?: Maybe<(\n    { __typename?: 'Workout' }\n    & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n    & { workoutDetails?: Maybe<Array<(\n      { __typename?: 'WorkoutDetail' }\n      & Pick<WorkoutDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )>> }\n  )> }\n);\n\nexport type WorkoutsQueryVariables = Exact<{\n  sens?: Maybe<Scalars['Int']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WorkoutsQuery = (\n  { __typename?: 'Query' }\n  & { workouts?: Maybe<(\n    { __typename?: 'PaginatedWorkout' }\n    & Pick<PaginatedWorkout, 'hasMorePrev' | 'hasMoreNext' | 'weekNb' | 'nextCursorValue'>\n    & { workouts: Array<(\n      { __typename?: 'Workout' }\n      & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n      & { workoutDetails?: Maybe<Array<(\n        { __typename?: 'WorkoutDetail' }\n        & Pick<WorkoutDetail, 'id' | 'exoId'>\n        & { exoDetail: Array<(\n          { __typename?: 'exoDetails' }\n          & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n        )> }\n      )>> }\n    )> }\n  )> }\n);\n\nexport const RegularProfileFragmentDoc = gql`\n    fragment RegularProfile on Profile {\n  lang_cd\n  sex\n  trainingFrequency\n  trainingType\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularTemplateFragmentDoc = gql`\n    fragment RegularTemplate on Template {\n  id\n  templateType\n  name\n  templateDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularTemplateResponseFragmentDoc = gql`\n    fragment RegularTemplateResponse on TemplateResponse {\n  errors {\n    ...RegularError\n  }\n  template {\n    ...RegularTemplate\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularTemplateFragmentDoc}`;\nexport const RegularWorkoutFragmentDoc = gql`\n    fragment RegularWorkout on Workout {\n  id\n  workoutDt\n  createdAt\n  updatedAt\n  workoutType\n  workoutDesc\n  weekNb\n  workoutDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularWorkoutResponseFragmentDoc = gql`\n    fragment RegularWorkoutResponse on WorkoutResponse {\n  errors {\n    ...RegularError\n  }\n  workout {\n    ...RegularWorkout\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularWorkoutFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {\n        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, baseOptions);\n      }\nexport type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;\nexport type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;\nexport type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;\nexport const ChangeProfileDocument = gql`\n    mutation ChangeProfile($options: ProfileInput!) {\n  changeProfile(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangeProfileMutationFn = Apollo.MutationFunction<ChangeProfileMutation, ChangeProfileMutationVariables>;\n\n/**\n * __useChangeProfileMutation__\n *\n * To run a mutation, you first call `useChangeProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeProfileMutation, { data, loading, error }] = useChangeProfileMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useChangeProfileMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProfileMutation, ChangeProfileMutationVariables>) {\n        return Apollo.useMutation<ChangeProfileMutation, ChangeProfileMutationVariables>(ChangeProfileDocument, baseOptions);\n      }\nexport type ChangeProfileMutationHookResult = ReturnType<typeof useChangeProfileMutation>;\nexport type ChangeProfileMutationResult = Apollo.MutationResult<ChangeProfileMutation>;\nexport type ChangeProfileMutationOptions = Apollo.BaseMutationOptions<ChangeProfileMutation, ChangeProfileMutationVariables>;\nexport const CreateTemplateDocument = gql`\n    mutation CreateTemplate($options: TemplateInput!) {\n  createTemplate(options: $options) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\nexport type CreateTemplateMutationFn = Apollo.MutationFunction<CreateTemplateMutation, CreateTemplateMutationVariables>;\n\n/**\n * __useCreateTemplateMutation__\n *\n * To run a mutation, you first call `useCreateTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTemplateMutation, { data, loading, error }] = useCreateTemplateMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateTemplateMutation(baseOptions?: Apollo.MutationHookOptions<CreateTemplateMutation, CreateTemplateMutationVariables>) {\n        return Apollo.useMutation<CreateTemplateMutation, CreateTemplateMutationVariables>(CreateTemplateDocument, baseOptions);\n      }\nexport type CreateTemplateMutationHookResult = ReturnType<typeof useCreateTemplateMutation>;\nexport type CreateTemplateMutationResult = Apollo.MutationResult<CreateTemplateMutation>;\nexport type CreateTemplateMutationOptions = Apollo.BaseMutationOptions<CreateTemplateMutation, CreateTemplateMutationVariables>;\nexport const CreateWorkoutDocument = gql`\n    mutation CreateWorkout($options: WorkoutInput!) {\n  createWorkout(options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\nexport type CreateWorkoutMutationFn = Apollo.MutationFunction<CreateWorkoutMutation, CreateWorkoutMutationVariables>;\n\n/**\n * __useCreateWorkoutMutation__\n *\n * To run a mutation, you first call `useCreateWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWorkoutMutation, { data, loading, error }] = useCreateWorkoutMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<CreateWorkoutMutation, CreateWorkoutMutationVariables>) {\n        return Apollo.useMutation<CreateWorkoutMutation, CreateWorkoutMutationVariables>(CreateWorkoutDocument, baseOptions);\n      }\nexport type CreateWorkoutMutationHookResult = ReturnType<typeof useCreateWorkoutMutation>;\nexport type CreateWorkoutMutationResult = Apollo.MutationResult<CreateWorkoutMutation>;\nexport type CreateWorkoutMutationOptions = Apollo.BaseMutationOptions<CreateWorkoutMutation, CreateWorkoutMutationVariables>;\nexport const DeleteTemplateDocument = gql`\n    mutation DeleteTemplate($id: Int!) {\n  deleteTemplate(id: $id)\n}\n    `;\nexport type DeleteTemplateMutationFn = Apollo.MutationFunction<DeleteTemplateMutation, DeleteTemplateMutationVariables>;\n\n/**\n * __useDeleteTemplateMutation__\n *\n * To run a mutation, you first call `useDeleteTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTemplateMutation, { data, loading, error }] = useDeleteTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTemplateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTemplateMutation, DeleteTemplateMutationVariables>) {\n        return Apollo.useMutation<DeleteTemplateMutation, DeleteTemplateMutationVariables>(DeleteTemplateDocument, baseOptions);\n      }\nexport type DeleteTemplateMutationHookResult = ReturnType<typeof useDeleteTemplateMutation>;\nexport type DeleteTemplateMutationResult = Apollo.MutationResult<DeleteTemplateMutation>;\nexport type DeleteTemplateMutationOptions = Apollo.BaseMutationOptions<DeleteTemplateMutation, DeleteTemplateMutationVariables>;\nexport const DeleteWorkoutDocument = gql`\n    mutation DeleteWorkout($id: Int!) {\n  deleteWorkout(id: $id)\n}\n    `;\nexport type DeleteWorkoutMutationFn = Apollo.MutationFunction<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>;\n\n/**\n * __useDeleteWorkoutMutation__\n *\n * To run a mutation, you first call `useDeleteWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkoutMutation, { data, loading, error }] = useDeleteWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>) {\n        return Apollo.useMutation<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>(DeleteWorkoutDocument, baseOptions);\n      }\nexport type DeleteWorkoutMutationHookResult = ReturnType<typeof useDeleteWorkoutMutation>;\nexport type DeleteWorkoutMutationResult = Apollo.MutationResult<DeleteWorkoutMutation>;\nexport type DeleteWorkoutMutationOptions = Apollo.BaseMutationOptions<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>;\nexport const EditTemplateDocument = gql`\n    mutation EditTemplate($id: Int!, $options: TemplateInput!) {\n  editTemplate(id: $id, options: $options) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\nexport type EditTemplateMutationFn = Apollo.MutationFunction<EditTemplateMutation, EditTemplateMutationVariables>;\n\n/**\n * __useEditTemplateMutation__\n *\n * To run a mutation, you first call `useEditTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTemplateMutation, { data, loading, error }] = useEditTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditTemplateMutation(baseOptions?: Apollo.MutationHookOptions<EditTemplateMutation, EditTemplateMutationVariables>) {\n        return Apollo.useMutation<EditTemplateMutation, EditTemplateMutationVariables>(EditTemplateDocument, baseOptions);\n      }\nexport type EditTemplateMutationHookResult = ReturnType<typeof useEditTemplateMutation>;\nexport type EditTemplateMutationResult = Apollo.MutationResult<EditTemplateMutation>;\nexport type EditTemplateMutationOptions = Apollo.BaseMutationOptions<EditTemplateMutation, EditTemplateMutationVariables>;\nexport const EditWorkoutDocument = gql`\n    mutation EditWorkout($id: Int!, $options: WorkoutInput!) {\n  editWorkout(id: $id, options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\nexport type EditWorkoutMutationFn = Apollo.MutationFunction<EditWorkoutMutation, EditWorkoutMutationVariables>;\n\n/**\n * __useEditWorkoutMutation__\n *\n * To run a mutation, you first call `useEditWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkoutMutation, { data, loading, error }] = useEditWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<EditWorkoutMutation, EditWorkoutMutationVariables>) {\n        return Apollo.useMutation<EditWorkoutMutation, EditWorkoutMutationVariables>(EditWorkoutDocument, baseOptions);\n      }\nexport type EditWorkoutMutationHookResult = ReturnType<typeof useEditWorkoutMutation>;\nexport type EditWorkoutMutationResult = Apollo.MutationResult<EditWorkoutMutation>;\nexport type EditWorkoutMutationOptions = Apollo.BaseMutationOptions<EditWorkoutMutation, EditWorkoutMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const ExoDocument = gql`\n    query Exo {\n  exo {\n    id\n    exoId\n    exoDesc\n    bodyPart\n    langCd\n  }\n}\n    `;\n\n/**\n * __useExoQuery__\n *\n * To run a query within a React component, call `useExoQuery` and pass it any options that fit your needs.\n * When your component renders, `useExoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExoQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useExoQuery(baseOptions?: Apollo.QueryHookOptions<ExoQuery, ExoQueryVariables>) {\n        return Apollo.useQuery<ExoQuery, ExoQueryVariables>(ExoDocument, baseOptions);\n      }\nexport function useExoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ExoQuery, ExoQueryVariables>) {\n          return Apollo.useLazyQuery<ExoQuery, ExoQueryVariables>(ExoDocument, baseOptions);\n        }\nexport type ExoQueryHookResult = ReturnType<typeof useExoQuery>;\nexport type ExoLazyQueryHookResult = ReturnType<typeof useExoLazyQuery>;\nexport type ExoQueryResult = Apollo.QueryResult<ExoQuery, ExoQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n    profile {\n      ...RegularProfile\n    }\n  }\n}\n    ${RegularUserFragmentDoc}\n${RegularProfileFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const TemplateDocument = gql`\n    query Template($templateId: Int!) {\n  template(templateId: $templateId) {\n    id\n    templateType\n    name\n    templateDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTemplateQuery__\n *\n * To run a query within a React component, call `useTemplateQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplateQuery({\n *   variables: {\n *      templateId: // value for 'templateId'\n *   },\n * });\n */\nexport function useTemplateQuery(baseOptions: Apollo.QueryHookOptions<TemplateQuery, TemplateQueryVariables>) {\n        return Apollo.useQuery<TemplateQuery, TemplateQueryVariables>(TemplateDocument, baseOptions);\n      }\nexport function useTemplateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TemplateQuery, TemplateQueryVariables>) {\n          return Apollo.useLazyQuery<TemplateQuery, TemplateQueryVariables>(TemplateDocument, baseOptions);\n        }\nexport type TemplateQueryHookResult = ReturnType<typeof useTemplateQuery>;\nexport type TemplateLazyQueryHookResult = ReturnType<typeof useTemplateLazyQuery>;\nexport type TemplateQueryResult = Apollo.QueryResult<TemplateQuery, TemplateQueryVariables>;\nexport const TemplatesDocument = gql`\n    query Templates {\n  templates {\n    id\n    templateType\n    name\n    templateDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTemplatesQuery__\n *\n * To run a query within a React component, call `useTemplatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplatesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTemplatesQuery(baseOptions?: Apollo.QueryHookOptions<TemplatesQuery, TemplatesQueryVariables>) {\n        return Apollo.useQuery<TemplatesQuery, TemplatesQueryVariables>(TemplatesDocument, baseOptions);\n      }\nexport function useTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TemplatesQuery, TemplatesQueryVariables>) {\n          return Apollo.useLazyQuery<TemplatesQuery, TemplatesQueryVariables>(TemplatesDocument, baseOptions);\n        }\nexport type TemplatesQueryHookResult = ReturnType<typeof useTemplatesQuery>;\nexport type TemplatesLazyQueryHookResult = ReturnType<typeof useTemplatesLazyQuery>;\nexport type TemplatesQueryResult = Apollo.QueryResult<TemplatesQuery, TemplatesQueryVariables>;\nexport const WorkoutDocument = gql`\n    query Workout($workoutId: Int!) {\n  workout(workoutId: $workoutId) {\n    id\n    workoutDt\n    createdAt\n    updatedAt\n    workoutType\n    workoutDesc\n    weekNb\n    workoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkoutQuery__\n *\n * To run a query within a React component, call `useWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutQuery({\n *   variables: {\n *      workoutId: // value for 'workoutId'\n *   },\n * });\n */\nexport function useWorkoutQuery(baseOptions: Apollo.QueryHookOptions<WorkoutQuery, WorkoutQueryVariables>) {\n        return Apollo.useQuery<WorkoutQuery, WorkoutQueryVariables>(WorkoutDocument, baseOptions);\n      }\nexport function useWorkoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkoutQuery, WorkoutQueryVariables>) {\n          return Apollo.useLazyQuery<WorkoutQuery, WorkoutQueryVariables>(WorkoutDocument, baseOptions);\n        }\nexport type WorkoutQueryHookResult = ReturnType<typeof useWorkoutQuery>;\nexport type WorkoutLazyQueryHookResult = ReturnType<typeof useWorkoutLazyQuery>;\nexport type WorkoutQueryResult = Apollo.QueryResult<WorkoutQuery, WorkoutQueryVariables>;\nexport const WorkoutsDocument = gql`\n    query Workouts($sens: Int, $cursor: String) {\n  workouts(sens: $sens, cursor: $cursor) {\n    hasMorePrev\n    hasMoreNext\n    weekNb\n    nextCursorValue\n    workouts {\n      id\n      workoutDt\n      createdAt\n      updatedAt\n      workoutType\n      workoutDesc\n      weekNb\n      workoutDetails {\n        id\n        exoId\n        exoDetail {\n          sets\n          feedback\n          reps\n          grade\n          rest\n          weight\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkoutsQuery__\n *\n * To run a query within a React component, call `useWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutsQuery({\n *   variables: {\n *      sens: // value for 'sens'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useWorkoutsQuery(baseOptions?: Apollo.QueryHookOptions<WorkoutsQuery, WorkoutsQueryVariables>) {\n        return Apollo.useQuery<WorkoutsQuery, WorkoutsQueryVariables>(WorkoutsDocument, baseOptions);\n      }\nexport function useWorkoutsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkoutsQuery, WorkoutsQueryVariables>) {\n          return Apollo.useLazyQuery<WorkoutsQuery, WorkoutsQueryVariables>(WorkoutsDocument, baseOptions);\n        }\nexport type WorkoutsQueryHookResult = ReturnType<typeof useWorkoutsQuery>;\nexport type WorkoutsLazyQueryHookResult = ReturnType<typeof useWorkoutsLazyQuery>;\nexport type WorkoutsQueryResult = Apollo.QueryResult<WorkoutsQuery, WorkoutsQueryVariables>;"]},"metadata":{},"sourceType":"module"}