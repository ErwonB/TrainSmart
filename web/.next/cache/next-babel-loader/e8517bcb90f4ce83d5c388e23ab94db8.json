{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/pages/template.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button, Flex, Select, FormLabel, FormControl } from \"@chakra-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport { useCreateTemplateMutation, useEditTemplateMutation, useExoQuery, useTemplatesQuery } from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { BodyFormik } from \"../components/BodyFormik\";\nvar validationSchema = yup.object({\n  templateDetails: yup.array().of(yup.object({\n    exoDetail: yup.array().of(yup.object({\n      sets: yup.number().integer().positive().required(\"Nb sets is required\"),\n      reps: yup.number().integer().positive().required(\"Nb reps is required\"),\n      weight: yup.number().positive().required(\"Weight is required\"),\n      grade: yup.number().positive().max(10).required(\"Grade is required\")\n    }))\n  }))\n});\n\nvar CreateTemplate = function CreateTemplate(_ref) {\n  _s();\n\n  var _exo$exo, _templates$templates;\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var apolloClient = useApolloClient();\n  useIsAuth();\n\n  var _useCreateTemplateMut = useCreateTemplateMutation(),\n      _useCreateTemplateMut2 = _slicedToArray(_useCreateTemplateMut, 1),\n      createTemplate = _useCreateTemplateMut2[0];\n\n  var _useEditTemplateMutat = useEditTemplateMutation(),\n      _useEditTemplateMutat2 = _slicedToArray(_useEditTemplateMutat, 1),\n      editTemplate = _useEditTemplateMutat2[0];\n\n  var _useTemplatesQuery = useTemplatesQuery(),\n      templates = _useTemplatesQuery.data;\n\n  var _useExoQuery = useExoQuery(),\n      exo = _useExoQuery.data;\n\n  var _useState = useState(\"create\"),\n      templateFct = _useState[0],\n      setTemplateFct = _useState[1];\n\n  var _useState2 = useState(0),\n      templateId = _useState2[0],\n      setTemplateId = _useState2[1];\n\n  var _useState3 = useState({\n    templateType: \"\",\n    name: \"\",\n    templateDetails: []\n  }),\n      tpInput = _useState3[0],\n      setTpInput = _useState3[1];\n\n  var exoItems = exo === null || exo === void 0 ? void 0 : (_exo$exo = exo.exo) === null || _exo$exo === void 0 ? void 0 : _exo$exo.map(function (e) {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: e.exoId,\n      children: e.exoDesc\n    }, e.exoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, _this);\n  });\n  var initValueForm = {};\n  var templatesName = templates === null || templates === void 0 ? void 0 : (_templates$templates = templates.templates) === null || _templates$templates === void 0 ? void 0 : _templates$templates.map(function (t) {\n    initValueForm[t.id] = {\n      templateType: t.templateType,\n      name: t.name,\n      templateDetails: t.templateDetails.map(function (td) {\n        return {\n          exoId: \"\" + td.exoId,\n          exoDetail: td.exoDetail.map(function (e) {\n            return {\n              sets: e.sets,\n              reps: e.reps,\n              weight: e.weight,\n              grade: e.grade,\n              rest: e.rest,\n              feedback: e.feedback\n            };\n          })\n        };\n      })\n    };\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: t.id,\n      children: t.name\n    }, t.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: tpInput,\n      validationSchema: validationSchema,\n      onSubmit: /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(templateFct === \"create\")) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return createTemplate({\n                    variables: {\n                      options: values\n                    },\n                    update: function update(cache) {\n                      cache.evict({\n                        fieldName: \"templates:{}\"\n                      });\n                    }\n                  });\n\n                case 3:\n                  _context.next = 7;\n                  break;\n\n                case 5:\n                  _context.next = 7;\n                  return editTemplate({\n                    variables: {\n                      id: templateId,\n                      options: values\n                    },\n                    update: function update(cache) {\n                      cache.evict({\n                        fieldName: \"templates:{}\"\n                      });\n                    }\n                  });\n\n                case 7:\n                  _context.next = 9;\n                  return apolloClient.resetStore();\n\n                case 9:\n                  router.push(\"/\");\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref3) {\n        var _templates$templates2;\n\n        var isSubmitting = _ref3.isSubmitting,\n            values = _ref3.values;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              name: \"templateType\",\n              placeholder: \"Template Type\",\n              label: \"Template Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"name\",\n              placeholder: \"Template name\",\n              label: \"Template name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, _this), (templates === null || templates === void 0 ? void 0 : (_templates$templates2 = templates.templates) === null || _templates$templates2 === void 0 ? void 0 : _templates$templates2.length) !== 0 ? /*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                htmlFor: \"templatesName\",\n                children: \"Template List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(Field, {\n                as: Select,\n                name: \"templatesName\",\n                label: \"Template List\",\n                type: \"select\",\n                onChange: function onChange(t) {\n                  if (parseInt(t.target.value, 10) === 0) {\n                    setTemplateId(0);\n                    setTemplateFct(\"create\");\n                    setTpInput({\n                      templateType: \"\",\n                      name: \"\",\n                      templateDetails: []\n                    });\n                  } else {\n                    setTemplateId(parseInt(t.target.value, 10));\n                    setTemplateFct(\"update\"); // values = initValueForm[t.target.value];\n\n                    setTpInput(initValueForm[t.target.value]);\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\"\n                }, \"0\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 21\n                }, _this), templatesName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, _this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(BodyFormik, {\n            valuesArray: values.templateDetails,\n            nameFieldArray: \"templateDetails\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, _this), templateFct === \"create\" ? /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            isLoading: isSubmitting,\n            variantColor: \"teal\",\n            children: \"create template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, _this) : /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            isLoading: isSubmitting,\n            variantColor: \"teal\",\n            children: \"update template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CreateTemplate, \"NhgnNmiHzWHvJs6oV/dgAaFF2X0=\", false, function () {\n  return [useRouter, useApolloClient, useIsAuth, useCreateTemplateMutation, useEditTemplateMutation, useTemplatesQuery, useExoQuery];\n});\n\n_c = CreateTemplate;\nexport default withApollo({\n  ssr: false\n})(CreateTemplate);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTemplate\");","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/pages/template.tsx"],"names":["Button","Flex","Select","FormLabel","FormControl","Field","Form","Formik","useRouter","React","useState","InputField","Layout","useCreateTemplateMutation","useEditTemplateMutation","useExoQuery","useTemplatesQuery","useIsAuth","withApollo","yup","useApolloClient","BodyFormik","validationSchema","object","templateDetails","array","of","exoDetail","sets","number","integer","positive","required","reps","weight","grade","max","CreateTemplate","router","apolloClient","createTemplate","editTemplate","templates","data","exo","templateFct","setTemplateFct","templateId","setTemplateId","templateType","name","tpInput","setTpInput","exoItems","map","e","exoId","exoDesc","initValueForm","templatesName","t","id","td","rest","feedback","values","variables","options","update","cache","evict","fieldName","resetStore","push","isSubmitting","length","parseInt","target","value","ssr"],"mappings":"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","sourcesContent":["import {\n  IconButton,\n  Box,\n  Button,\n  Flex,\n  Select,\n  Textarea,\n  FormLabel,\n  FormControl,\n} from \"@chakra-ui/core\";\nimport { Field, FieldArray, Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport {\n  TemplateInput,\n  useCreateTemplateMutation,\n  useEditTemplateMutation,\n  useExoQuery,\n  useTemplatesQuery,\n} from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { BodyFormik } from \"../components/BodyFormik\";\n\nconst validationSchema = yup.object({\n  templateDetails: yup.array().of(\n    yup.object({\n      exoDetail: yup.array().of(\n        yup.object({\n          sets: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb sets is required\"),\n          reps: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb reps is required\"),\n          weight: yup.number().positive().required(\"Weight is required\"),\n          grade: yup.number().positive().max(10).required(\"Grade is required\"),\n        })\n      ),\n    })\n  ),\n});\n\nconst CreateTemplate: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const apolloClient = useApolloClient();\n  useIsAuth();\n  const [createTemplate] = useCreateTemplateMutation();\n  const [editTemplate] = useEditTemplateMutation();\n  const { data: templates } = useTemplatesQuery();\n  const { data: exo } = useExoQuery();\n  const [templateFct, setTemplateFct] = useState<\"create\" | \"update\">(\"create\");\n  const [templateId, setTemplateId] = useState<number>(0);\n  const [tpInput, setTpInput] = useState<TemplateInput>({\n    templateType: \"\",\n    name: \"\",\n    templateDetails: [],\n  });\n  const exoItems = exo?.exo?.map((e) => {\n    return (\n      <option value={e.exoId} key={e.exoId}>\n        {e.exoDesc}\n      </option>\n    );\n  });\n  const initValueForm: Record<number, TemplateInput> = {};\n  const templatesName = templates?.templates?.map((t) => {\n    initValueForm[t.id] = {\n      templateType: t.templateType,\n      name: t.name,\n      templateDetails: t.templateDetails.map((td) => {\n        return {\n          exoId: \"\" + td.exoId,\n          exoDetail: td.exoDetail.map((e) => {\n            return {\n              sets: e.sets,\n              reps: e.reps,\n              weight: e.weight,\n              grade: e.grade,\n              rest: e.rest,\n              feedback: e.feedback,\n            };\n          }),\n        };\n      }),\n    };\n\n    return (\n      <option value={t.id} key={t.id}>\n        {t.name}\n      </option>\n    );\n  });\n\n  return (\n    <Layout>\n      <Formik\n        enableReinitialize={true}\n        initialValues={tpInput}\n        validationSchema={validationSchema}\n        onSubmit={async (values) => {\n          if (templateFct === \"create\") {\n            await createTemplate({\n              variables: { options: values },\n              update: (cache) => {\n                cache.evict({ fieldName: \"templates:{}\" });\n              },\n            });\n          } else {\n            await editTemplate({\n              variables: { id: templateId, options: values },\n              update: (cache) => {\n                cache.evict({ fieldName: \"templates:{}\" });\n              },\n            });\n          }\n          await apolloClient.resetStore();\n          router.push(\"/\");\n        }}\n      >\n        {({ isSubmitting, values }) => (\n          <Form>\n            <Flex>\n              <InputField\n                name=\"templateType\"\n                placeholder=\"Template Type\"\n                label=\"Template Type\"\n              />\n              <InputField\n                name=\"name\"\n                placeholder=\"Template name\"\n                label=\"Template name\"\n              />\n              {templates?.templates?.length !== 0 ? (\n                <FormControl>\n                  <FormLabel htmlFor=\"templatesName\">Template List</FormLabel>\n                  <Field\n                    as={Select}\n                    name=\"templatesName\"\n                    label=\"Template List\"\n                    type=\"select\"\n                    onChange={(t) => {\n                      if (parseInt(t.target.value, 10) === 0) {\n                        setTemplateId(0);\n                        setTemplateFct(\"create\");\n                        setTpInput({\n                          templateType: \"\",\n                          name: \"\",\n                          templateDetails: [],\n                        });\n                      } else {\n                        setTemplateId(parseInt(t.target.value, 10));\n                        setTemplateFct(\"update\");\n                        // values = initValueForm[t.target.value];\n                        setTpInput(initValueForm[t.target.value]);\n                      }\n                    }}\n                  >\n                    <option value=\"0\" key=\"0\"></option>\n                    {templatesName}\n                  </Field>\n                </FormControl>\n              ) : null}\n            </Flex>\n            <BodyFormik\n              valuesArray={values.templateDetails}\n              nameFieldArray=\"templateDetails\"\n            />\n            {templateFct === \"create\" ? (\n              <Button\n                mt={4}\n                type=\"submit\"\n                isLoading={isSubmitting}\n                variantColor=\"teal\"\n              >\n                create template\n              </Button>\n            ) : (\n              <Button\n                mt={4}\n                type=\"submit\"\n                isLoading={isSubmitting}\n                variantColor=\"teal\"\n              >\n                update template\n              </Button>\n            )}\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: false })(CreateTemplate);\n"]},"metadata":{},"sourceType":"module"}