{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/pages/workout/edit/[id].tsx\";\nimport { Box, Button, Flex } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { InputField } from \"../../../components/InputField\";\nimport { Layout } from \"../../../components/Layout\";\nimport { useEditWorkoutMutation, useExoQuery, useWorkoutQuery } from \"../../../generated/graphql\";\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\nimport { withApollo } from \"../../../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { BodyFormik } from \"../../../components/BodyFormik\";\nconst validationSchema = yup.object({\n  workoutDt: yup.date().max(new Date(new Date().setDate(new Date().getDate())), \"Can't create a workout in the future\"),\n  workoutDetails: yup.array().of(yup.object({\n    exoDetail: yup.array().of(yup.object({\n      sets: yup.number().integer().positive().required(\"Nb sets is required\"),\n      reps: yup.number().integer().positive().required(\"Nb reps is required\"),\n      weight: yup.number().positive().required(\"Weight is required\"),\n      grade: yup.number().positive().max(10).required(\"Grade is required\")\n    }))\n  }))\n});\n\nconst EditWorkout = ({}) => {\n  var _exo$exo;\n\n  const router = useRouter();\n  const intId = useGetIntId();\n  const {\n    data,\n    loading\n  } = useWorkoutQuery({\n    skip: intId === -1,\n    variables: {\n      workoutId: intId\n    }\n  });\n  const {\n    data: exo\n  } = useExoQuery();\n  const exoItems = exo === null || exo === void 0 ? void 0 : (_exo$exo = exo.exo) === null || _exo$exo === void 0 ? void 0 : _exo$exo.map(e => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: e.exoId,\n      children: e.exoDesc\n    }, e.exoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  });\n  const [editWorkout] = useEditWorkoutMutation();\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.workout)) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: \"could not find workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n  let workoutDetailsClean = data.workout.workoutDetails.map(w => {\n    return {\n      exoId: \"\" + w.exoId,\n      exoDetail: w.exoDetail.map(e => {\n        return {\n          sets: e.sets,\n          reps: e.reps,\n          weight: e.weight,\n          grade: e.grade,\n          rest: e.rest,\n          feedback: e.feedback\n        };\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        workoutType: data.workout.workoutType,\n        workoutDesc: data.workout.workoutDesc,\n        workoutDt: data.workout.workoutDt,\n        workoutDetails: workoutDetailsClean\n      },\n      validationSchema: validationSchema,\n      onSubmit: async values => {\n        await editWorkout({\n          variables: {\n            id: intId,\n            options: {\n              workoutDt: values.workoutDt,\n              workoutType: values.workoutType,\n              workoutDesc: values.workoutDesc,\n              workoutDetails: values.workoutDetails\n            }\n          }\n        });\n        router.back();\n      },\n      children: ({\n        isSubmitting,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"workoutType\",\n            placeholder: \"Workout Type\",\n            label: \"Workout Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"workoutDt\",\n            type: \"date\",\n            placeholder: \"Workout Date\",\n            label: \"Workout Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BodyFormik, {\n          valuesArray: values.workoutDetails,\n          nameFieldArray: \"workoutDetails\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          type: \"submit\",\n          isLoading: isSubmitting,\n          variantColor: \"teal\",\n          children: \"update workout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(EditWorkout);","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/pages/workout/edit/[id].tsx"],"names":["Box","Button","Flex","Form","Formik","useRouter","React","InputField","Layout","useEditWorkoutMutation","useExoQuery","useWorkoutQuery","useGetIntId","withApollo","yup","BodyFormik","validationSchema","object","workoutDt","date","max","Date","setDate","getDate","workoutDetails","array","of","exoDetail","sets","number","integer","positive","required","reps","weight","grade","EditWorkout","router","intId","data","loading","skip","variables","workoutId","exo","exoItems","map","e","exoId","exoDesc","editWorkout","workout","workoutDetailsClean","w","rest","feedback","workoutType","workoutDesc","values","id","options","back","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button, Flex } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { InputField } from \"../../../components/InputField\";\nimport { Layout } from \"../../../components/Layout\";\nimport {\n  useEditWorkoutMutation,\n  useExoQuery,\n  useWorkoutQuery,\n} from \"../../../generated/graphql\";\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\nimport { withApollo } from \"../../../utils/withApollo\";\n\nimport * as yup from \"yup\";\nimport { BodyFormik } from \"../../../components/BodyFormik\";\n\nconst validationSchema = yup.object({\n  workoutDt: yup\n    .date()\n    .max(\n      new Date(new Date().setDate(new Date().getDate())),\n      \"Can't create a workout in the future\"\n    ),\n  workoutDetails: yup.array().of(\n    yup.object({\n      exoDetail: yup.array().of(\n        yup.object({\n          sets: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb sets is required\"),\n          reps: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb reps is required\"),\n          weight: yup.number().positive().required(\"Weight is required\"),\n          grade: yup.number().positive().max(10).required(\"Grade is required\"),\n        })\n      ),\n    })\n  ),\n});\n\nconst EditWorkout = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId();\n  const { data, loading } = useWorkoutQuery({\n    skip: intId === -1,\n    variables: {\n      workoutId: intId,\n    },\n  });\n  const { data: exo } = useExoQuery();\n  const exoItems = exo?.exo?.map((e) => {\n    return (\n      <option value={e.exoId} key={e.exoId}>\n        {e.exoDesc}\n      </option>\n    );\n  });\n  const [editWorkout] = useEditWorkoutMutation();\n  if (loading) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    );\n  }\n\n  if (!data?.workout) {\n    return (\n      <Layout>\n        <Box>could not find workout</Box>\n      </Layout>\n    );\n  }\n  let workoutDetailsClean = data.workout.workoutDetails.map((w) => {\n    return {\n      exoId: \"\" + w.exoId,\n      exoDetail: w.exoDetail.map((e) => {\n        return {\n          sets: e.sets,\n          reps: e.reps,\n          weight: e.weight,\n          grade: e.grade,\n          rest: e.rest,\n          feedback: e.feedback,\n        };\n      }),\n    };\n  });\n\n  return (\n    <Layout>\n      <Formik\n        initialValues={{\n          workoutType: data.workout.workoutType,\n          workoutDesc: data.workout.workoutDesc,\n          workoutDt: data.workout.workoutDt,\n          workoutDetails: workoutDetailsClean,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values) => {\n          await editWorkout({\n            variables: {\n              id: intId,\n              options: {\n                workoutDt: values.workoutDt,\n                workoutType: values.workoutType,\n                workoutDesc: values.workoutDesc,\n                workoutDetails: values.workoutDetails,\n              },\n            },\n          });\n          router.back();\n        }}\n      >\n        {({ isSubmitting, values }) => (\n          <Form>\n            <Flex>\n              <InputField\n                name=\"workoutType\"\n                placeholder=\"Workout Type\"\n                label=\"Workout Type\"\n              />\n              <InputField\n                name=\"workoutDt\"\n                type=\"date\"\n                placeholder=\"Workout Date\"\n                label=\"Workout Date\"\n              />\n            </Flex>\n            <BodyFormik\n              valuesArray={values.workoutDetails}\n              nameFieldArray=\"workoutDetails\"\n            />\n            <Button\n              mt={4}\n              type=\"submit\"\n              isLoading={isSubmitting}\n              variantColor=\"teal\"\n            >\n              update workout\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: false })(EditWorkout);\n"]},"metadata":{},"sourceType":"module"}