{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/components/ChangeProfile.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Box } from \"@chakra-ui/core\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { useChangeProfileMutation } from \"../generated/graphql\";\nimport * as yup from \"yup\";\nimport { Formik } from \"formik\";\nvar validationSchema = yup.object({\n  trainingFrequency: yup.number().positive()\n});\nexport var ChangeProfile = function ChangeProfile(_ref) {\n  _s();\n\n  var profile = _ref.profile;\n  var apolloClient = useApolloClient();\n  var router = useRouter();\n\n  var _useChangeProfileMuta = useChangeProfileMutation(),\n      _useChangeProfileMuta2 = _slicedToArray(_useChangeProfileMuta, 1),\n      changeProfile = _useChangeProfileMuta2[0];\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: !profile ? {\n        lang_cd: \"\",\n        trainingFrequency: 0,\n        trainingType: \"\",\n        sex: \"\"\n      } : {\n        lang_cd: profile.lang_cd,\n        trainingType: profile.trainingType,\n        trainingFrequency: profile.trainingFrequency,\n        sex: profile.sex\n      },\n      validationSchema: validationSchema,\n      onSubmit: /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return changeProfile({\n                    variables: {\n                      options: {\n                        lang_cd: values.lang_cd,\n                        trainingType: values.trainingType,\n                        trainingFrequency: values.trainingFrequency,\n                        sex: values.sex\n                      }\n                    }\n                  });\n\n                case 2:\n                  _context.next = 4;\n                  return apolloClient.resetStore();\n\n                case 4:\n                  router.push(\"/\");\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChangeProfile, \"nD5h+Sh8UX84tOONU/jgopnk4/w=\", false, function () {\n  return [useApolloClient, useRouter, useChangeProfileMutation];\n});\n\n_c = ChangeProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeProfile\");","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/components/ChangeProfile.tsx"],"names":["React","Box","useRouter","useApolloClient","useChangeProfileMutation","yup","Formik","validationSchema","object","trainingFrequency","number","positive","ChangeProfile","profile","apolloClient","router","changeProfile","lang_cd","trainingType","sex","values","variables","options","resetStore","push"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoD,iBAApD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAEEC,wBAFF,QAGO,sBAHP;AAIA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAAgBC,MAAhB,QAA8B,QAA9B;AAOA,IAAMC,gBAAgB,GAAGF,GAAG,CAACG,MAAJ,CAAW;AAClCC,EAAAA,iBAAiB,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,QAAb;AADe,CAAX,CAAzB;AAIA,OAAO,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,OAAiB;AAAA;;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC1E,MAAMC,YAAY,GAAGX,eAAe,EAApC;AACA,MAAMY,MAAM,GAAGb,SAAS,EAAxB;;AAF0E,8BAGlDE,wBAAwB,EAH0B;AAAA;AAAA,MAGnEY,aAHmE;;AAK1E,sBACE,QAAC,GAAD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EACX,CAACH,OAAD,GACI;AAAEI,QAAAA,OAAO,EAAE,EAAX;AAAeR,QAAAA,iBAAiB,EAAE,CAAlC;AAAqCS,QAAAA,YAAY,EAAE,EAAnD;AAAuDC,QAAAA,GAAG,EAAE;AAA5D,OADJ,GAEI;AACEF,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OADnB;AAEEC,QAAAA,YAAY,EAAEL,OAAO,CAACK,YAFxB;AAGET,QAAAA,iBAAiB,EAAEI,OAAO,CAACJ,iBAH7B;AAIEU,QAAAA,GAAG,EAAEN,OAAO,CAACM;AAJf,OAJR;AAWE,MAAA,gBAAgB,EAAEZ,gBAXpB;AAYE,MAAA,QAAQ;AAAA,6EAAE,iBAAOa,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACFJ,aAAa,CAAC;AAClBK,oBAAAA,SAAS,EAAE;AACTC,sBAAAA,OAAO,EAAE;AACPL,wBAAAA,OAAO,EAAEG,MAAM,CAACH,OADT;AAEPC,wBAAAA,YAAY,EAAEE,MAAM,CAACF,YAFd;AAGPT,wBAAAA,iBAAiB,EAAEW,MAAM,CAACX,iBAHnB;AAIPU,wBAAAA,GAAG,EAAEC,MAAM,CAACD;AAJL;AADA;AADO,mBAAD,CADX;;AAAA;AAAA;AAAA,yBAWFL,YAAY,CAACS,UAAb,EAXE;;AAAA;AAYRR,kBAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;;AAZQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA;AAZV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AA+BD,CApCM;;GAAMZ,a;UACUT,e,EACND,S,EACSE,wB;;;KAHbQ,a","sourcesContent":["import React from \"react\";\nimport { Box, FormControl, FormLabel, Select } from \"@chakra-ui/core\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nimport {\n  RegularProfileFragment,\n  useChangeProfileMutation,\n} from \"../generated/graphql\";\nimport * as yup from \"yup\";\nimport { Field, Formik } from \"formik\";\nimport { InputField } from \"./InputField\";\n\ninterface ChangeProfileProps {\n  profile: RegularProfileFragment | null;\n}\n\nconst validationSchema = yup.object({\n  trainingFrequency: yup.number().positive(),\n});\n\nexport const ChangeProfile: React.FC<ChangeProfileProps> = ({ profile }) => {\n  const apolloClient = useApolloClient();\n  const router = useRouter();\n  const [changeProfile] = useChangeProfileMutation();\n\n  return (\n    <Box>\n      <Formik\n        initialValues={\n          !profile\n            ? { lang_cd: \"\", trainingFrequency: 0, trainingType: \"\", sex: \"\" }\n            : {\n                lang_cd: profile.lang_cd,\n                trainingType: profile.trainingType,\n                trainingFrequency: profile.trainingFrequency,\n                sex: profile.sex,\n              }\n        }\n        validationSchema={validationSchema}\n        onSubmit={async (values) => {\n          await changeProfile({\n            variables: {\n              options: {\n                lang_cd: values.lang_cd,\n                trainingType: values.trainingType,\n                trainingFrequency: values.trainingFrequency,\n                sex: values.sex,\n              },\n            },\n          });\n          await apolloClient.resetStore();\n          router.push(\"/\");\n        }}\n      ></Formik>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}