{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/pages/create-workout.tsx\";\nimport { Box, Button, Select, FormControl, FormLabel } from \"@chakra-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport { useCreateWorkoutMutation, useTemplatesQuery } from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { BodyFormik } from \"../components/BodyFormik\";\nconst validationSchema = yup.object({\n  workoutDt: yup.date().required().max(new Date(new Date().setDate(new Date().getDate())), \"Can't create a workout in the future\"),\n  workoutDetails: yup.array().of(yup.object({\n    exoDetail: yup.array().of(yup.object({\n      sets: yup.number().integer().positive().required(\"Nb sets is required\"),\n      reps: yup.number().integer().positive().required(\"Nb reps is required\"),\n      weight: yup.number().positive().required(\"Weight is required\"),\n      grade: yup.number().positive().max(10).required(\"Grade is required\")\n    }))\n  }))\n});\n\nconst CreateWorkout = ({}) => {\n  var _templates$templates;\n\n  const router = useRouter();\n  useIsAuth();\n  const [createWorkout] = useCreateWorkoutMutation();\n  const {\n    data: templates\n  } = useTemplatesQuery();\n  const {\n    0: tpInput,\n    1: setTpInput\n  } = useState({\n    workoutType: \"\",\n    workoutDt: \"\",\n    workoutDesc: \"\",\n    workoutDetails: []\n  });\n  const initValueForm = {};\n  const templatesName = templates === null || templates === void 0 ? void 0 : (_templates$templates = templates.templates) === null || _templates$templates === void 0 ? void 0 : _templates$templates.map(t => {\n    initValueForm[t.id] = {\n      workoutType: t.templateType,\n      workoutDt: \"\",\n      workoutDesc: \"\",\n      workoutDetails: t.templateDetails.map(td => {\n        return {\n          exoId: \"\" + td.exoId,\n          exoDetail: td.exoDetail.map(e => {\n            return {\n              sets: e.sets,\n              reps: e.reps,\n              weight: e.weight,\n              grade: e.grade,\n              rest: e.rest,\n              feedback: e.feedback\n            };\n          })\n        };\n      })\n    };\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: t.id,\n      children: t.name\n    }, t.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      mr: {\n        sd: \"none\",\n        md: \"15%\"\n      },\n      ml: {\n        sd: \"none\",\n        md: \"15%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: tpInput,\n        validationSchema: validationSchema,\n        onSubmit: async values => {\n          const {\n            errors\n          } = await createWorkout({\n            variables: {\n              options: values\n            },\n            update: cache => {\n              cache.evict({\n                fieldName: \"workouts:{}\"\n              });\n            }\n          });\n\n          if (!errors) {\n            router.push(\"/\");\n          }\n        },\n        children: ({\n          isSubmitting,\n          values\n        }) => {\n          var _templates$templates2;\n\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              mb: 4,\n              display: {\n                sm: \"block\",\n                md: \"flex\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputField, {\n                name: \"workoutType\",\n                placeholder: \"Workout Type\",\n                label: \"Workout Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(InputField, {\n                name: \"workoutDt\",\n                type: \"date\",\n                placeholder: \"Workout Date\",\n                label: \"Workout Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), (templates === null || templates === void 0 ? void 0 : (_templates$templates2 = templates.templates) === null || _templates$templates2 === void 0 ? void 0 : _templates$templates2.length) !== 0 ? /*#__PURE__*/_jsxDEV(FormControl, {\n                ml: {\n                  sm: \"none\",\n                  md: \"auto\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"templatesName\",\n                  children: \"Template List\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  as: Select,\n                  name: \"templatesName\",\n                  label: \"Template List\",\n                  type: \"select\",\n                  onChange: t => {\n                    if (parseInt(t.target.value, 10) === 0) {\n                      setTpInput({\n                        workoutType: \"\",\n                        workoutDesc: \"\",\n                        workoutDt: \"\",\n                        workoutDetails: []\n                      });\n                    } else {\n                      setTpInput(initValueForm[t.target.value]);\n                    }\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"0\"\n                  }, \"0\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 23\n                  }, this), templatesName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(BodyFormik, {\n              valuesArray: values.workoutDetails,\n              nameFieldArray: \"workoutDetails\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              mt: 4,\n              type: \"submit\",\n              isLoading: isSubmitting,\n              variantColor: \"teal\",\n              children: \"create workout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(CreateWorkout);","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/pages/create-workout.tsx"],"names":["Box","Button","Select","FormControl","FormLabel","Field","Form","Formik","useRouter","React","useState","InputField","Layout","useCreateWorkoutMutation","useTemplatesQuery","useIsAuth","withApollo","yup","BodyFormik","validationSchema","object","workoutDt","date","required","max","Date","setDate","getDate","workoutDetails","array","of","exoDetail","sets","number","integer","positive","reps","weight","grade","CreateWorkout","router","createWorkout","data","templates","tpInput","setTpInput","workoutType","workoutDesc","initValueForm","templatesName","map","t","id","templateType","templateDetails","td","exoId","e","rest","feedback","name","sd","md","values","errors","variables","options","update","cache","evict","fieldName","push","isSubmitting","sm","length","parseInt","target","value","ssr"],"mappings":"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","sourcesContent":["import {\n  IconButton,\n  Box,\n  Button,\n  Flex,\n  Select,\n  FormControl,\n  FormLabel,\n} from \"@chakra-ui/core\";\nimport { Field, FieldArray, Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport {\n  useCreateWorkoutMutation,\n  useExoQuery,\n  useTemplatesQuery,\n  WorkoutInput,\n} from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\nimport * as yup from \"yup\";\nimport { BodyFormik } from \"../components/BodyFormik\";\n\nconst validationSchema = yup.object({\n  workoutDt: yup\n    .date()\n    .required()\n    .max(\n      new Date(new Date().setDate(new Date().getDate())),\n      \"Can't create a workout in the future\"\n    ),\n  workoutDetails: yup.array().of(\n    yup.object({\n      exoDetail: yup.array().of(\n        yup.object({\n          sets: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb sets is required\"),\n          reps: yup\n            .number()\n            .integer()\n            .positive()\n            .required(\"Nb reps is required\"),\n          weight: yup.number().positive().required(\"Weight is required\"),\n          grade: yup.number().positive().max(10).required(\"Grade is required\"),\n        })\n      ),\n    })\n  ),\n});\n\nconst CreateWorkout: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  useIsAuth();\n  const [createWorkout] = useCreateWorkoutMutation();\n  const { data: templates } = useTemplatesQuery();\n  const [tpInput, setTpInput] = useState<WorkoutInput>({\n    workoutType: \"\",\n    workoutDt: \"\",\n    workoutDesc: \"\",\n    workoutDetails: [],\n  });\n  const initValueForm: Record<number, WorkoutInput> = {};\n  const templatesName = templates?.templates?.map((t) => {\n    initValueForm[t.id] = {\n      workoutType: t.templateType,\n      workoutDt: \"\",\n      workoutDesc: \"\",\n      workoutDetails: t.templateDetails.map((td) => {\n        return {\n          exoId: \"\" + td.exoId,\n          exoDetail: td.exoDetail.map((e) => {\n            return {\n              sets: e.sets,\n              reps: e.reps,\n              weight: e.weight,\n              grade: e.grade,\n              rest: e.rest,\n              feedback: e.feedback,\n            };\n          }),\n        };\n      }),\n    };\n\n    return (\n      <option value={t.id} key={t.id}>\n        {t.name}\n      </option>\n    );\n  });\n  return (\n    <Layout>\n      <Box mr={{ sd: \"none\", md: \"15%\" }} ml={{ sd: \"none\", md: \"15%\" }}>\n        <Formik\n          enableReinitialize={true}\n          initialValues={tpInput}\n          validationSchema={validationSchema}\n          onSubmit={async (values) => {\n            const { errors } = await createWorkout({\n              variables: { options: values },\n              update: (cache) => {\n                cache.evict({ fieldName: \"workouts:{}\" });\n              },\n            });\n            if (!errors) {\n              router.push(\"/\");\n            }\n          }}\n        >\n          {({ isSubmitting, values }) => (\n            <Form>\n              <Box mb={4} display={{ sm: \"block\", md: \"flex\" }}>\n                <InputField\n                  name=\"workoutType\"\n                  placeholder=\"Workout Type\"\n                  label=\"Workout Type\"\n                />\n                <InputField\n                  name=\"workoutDt\"\n                  type=\"date\"\n                  placeholder=\"Workout Date\"\n                  label=\"Workout Date\"\n                />\n                {templates?.templates?.length !== 0 ? (\n                  <FormControl ml={{ sm: \"none\", md: \"auto\" }}>\n                    <FormLabel htmlFor=\"templatesName\">Template List</FormLabel>\n                    <Field\n                      as={Select}\n                      name=\"templatesName\"\n                      label=\"Template List\"\n                      type=\"select\"\n                      onChange={(t: any) => {\n                        if (parseInt(t.target.value, 10) === 0) {\n                          setTpInput({\n                            workoutType: \"\",\n                            workoutDesc: \"\",\n                            workoutDt: \"\",\n                            workoutDetails: [],\n                          });\n                        } else {\n                          setTpInput(initValueForm[t.target.value]);\n                        }\n                      }}\n                    >\n                      <option value=\"0\" key=\"0\"></option>\n                      {templatesName}\n                    </Field>\n                  </FormControl>\n                ) : null}\n              </Box>\n              <BodyFormik\n                valuesArray={values.workoutDetails}\n                nameFieldArray=\"workoutDetails\"\n              />\n              <Button\n                mt={4}\n                type=\"submit\"\n                isLoading={isSubmitting}\n                variantColor=\"teal\"\n              >\n                create workout\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: false })(CreateWorkout);\n"]},"metadata":{},"sourceType":"module"}