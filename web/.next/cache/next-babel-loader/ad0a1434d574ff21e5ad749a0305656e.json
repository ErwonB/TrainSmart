{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pi/mntRaspi/trainv2/web/src/components/InputField.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { useField } from \"formik\";\nimport { FormControl, FormLabel, Input, FormErrorMessage, Textarea } from \"@chakra-ui/core\";\n// '' => false\n// 'error message stuff' => true\nexport var InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      textarea = _ref.textarea,\n      _ = _ref.size,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"size\"]);\n\n  var InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [label ? /*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, _this) : null, /*#__PURE__*/_jsxDEV(InputOrTextarea, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      id: field.name\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/components/InputField.tsx"],"names":["React","useField","FormControl","FormLabel","Input","FormErrorMessage","Textarea","InputField","label","textarea","_","size","props","InputOrTextarea","field","error","name"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,EAKEC,QALF,QAMO,iBANP;AAcA;AACA;AAEA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAK/C;AAAA;;AAAA,MAJJC,KAII,QAJJA,KAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFEC,CAEF,QAFJC,IAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGT,KAAtB;;AACA,MAAIK,QAAJ,EAAc;AACZI,IAAAA,eAAe,GAAGP,QAAlB;AACD;;AAJG,kBAKuBL,QAAQ,CAACW,KAAD,CAL/B;AAAA;AAAA,MAKGE,KALH;AAAA,MAKYC,KALZ,iBAKYA,KALZ;;AAMJ,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA,eACGP,KAAK,gBAAG,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEM,KAAK,CAACE,IAA1B;AAAA,gBAAiCR;AAAjC;AAAA;AAAA;AAAA;AAAA,aAAH,GAAyD,IADjE,eAEE,QAAC,eAAD,gDAAqBM,KAArB,GAAgCF,KAAhC;AAAuC,MAAA,EAAE,EAAEE,KAAK,CAACE;AAAjD;AAAA;AAAA;AAAA;AAAA,aAFF,EAGGD,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,aAAH,GAAkD,IAH1D;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAlBM;;GAAMR,U;UAUgBN,Q;;;KAVhBM,U","sourcesContent":["import React, { InputHTMLAttributes } from \"react\";\nimport { useField } from \"formik\";\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Textarea,\n} from \"@chakra-ui/core\";\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label?: string;\n  name: string;\n  textarea?: boolean;\n};\n\n// '' => false\n// 'error message stuff' => true\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  label,\n  textarea,\n  size: _,\n  ...props\n}) => {\n  let InputOrTextarea = Input;\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n  const [field, { error }] = useField(props);\n  return (\n    <FormControl isInvalid={!!error}>\n      {label ? <FormLabel htmlFor={field.name}>{label}</FormLabel> : null}\n      <InputOrTextarea {...field} {...props} id={field.name} />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}