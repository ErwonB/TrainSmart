{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport const RegularProfileFragmentDoc = gql`\n    fragment RegularProfile on Profile {\n  lang_cd\n  sex\n  trainingFrequency\n  trainingType\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularTemplateFragmentDoc = gql`\n    fragment RegularTemplate on Template {\n  id\n  templateType\n  name\n  templateDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularTemplateResponseFragmentDoc = gql`\n    fragment RegularTemplateResponse on TemplateResponse {\n  errors {\n    ...RegularError\n  }\n  template {\n    ...RegularTemplate\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularTemplateFragmentDoc}`;\nexport const RegularWorkoutFragmentDoc = gql`\n    fragment RegularWorkout on Workout {\n  id\n  workoutDt\n  createdAt\n  updatedAt\n  workoutType\n  workoutDesc\n  weekNb\n  workoutDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularWorkoutResponseFragmentDoc = gql`\n    fragment RegularWorkoutResponse on WorkoutResponse {\n  errors {\n    ...RegularError\n  }\n  workout {\n    ...RegularWorkout\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularWorkoutFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions) {\n  return Apollo.useMutation(ChangePasswordDocument, baseOptions);\n}\nexport const ChangeProfileDocument = gql`\n    mutation ChangeProfile($options: ProfileInput!) {\n  changeProfile(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useChangeProfileMutation__\n *\n * To run a mutation, you first call `useChangeProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeProfileMutation, { data, loading, error }] = useChangeProfileMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useChangeProfileMutation(baseOptions) {\n  return Apollo.useMutation(ChangeProfileDocument, baseOptions);\n}\nexport const CreateTemplateDocument = gql`\n    mutation CreateTemplate($options: TemplateInput!) {\n  createTemplate(options: $options) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\n\n/**\n * __useCreateTemplateMutation__\n *\n * To run a mutation, you first call `useCreateTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTemplateMutation, { data, loading, error }] = useCreateTemplateMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateTemplateMutation(baseOptions) {\n  return Apollo.useMutation(CreateTemplateDocument, baseOptions);\n}\nexport const CreateWorkoutDocument = gql`\n    mutation CreateWorkout($options: WorkoutInput!) {\n  createWorkout(options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\n\n/**\n * __useCreateWorkoutMutation__\n *\n * To run a mutation, you first call `useCreateWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWorkoutMutation, { data, loading, error }] = useCreateWorkoutMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateWorkoutMutation(baseOptions) {\n  return Apollo.useMutation(CreateWorkoutDocument, baseOptions);\n}\nexport const DeleteTemplateDocument = gql`\n    mutation DeleteTemplate($id: Int!) {\n  deleteTemplate(id: $id)\n}\n    `;\n\n/**\n * __useDeleteTemplateMutation__\n *\n * To run a mutation, you first call `useDeleteTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTemplateMutation, { data, loading, error }] = useDeleteTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTemplateMutation(baseOptions) {\n  return Apollo.useMutation(DeleteTemplateDocument, baseOptions);\n}\nexport const DeleteWorkoutDocument = gql`\n    mutation DeleteWorkout($id: Int!) {\n  deleteWorkout(id: $id)\n}\n    `;\n\n/**\n * __useDeleteWorkoutMutation__\n *\n * To run a mutation, you first call `useDeleteWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkoutMutation, { data, loading, error }] = useDeleteWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkoutMutation(baseOptions) {\n  return Apollo.useMutation(DeleteWorkoutDocument, baseOptions);\n}\nexport const EditTemplateDocument = gql`\n    mutation EditTemplate($id: Int!, $options: TemplateInput!) {\n  editTemplate(id: $id, options: $options) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\n\n/**\n * __useEditTemplateMutation__\n *\n * To run a mutation, you first call `useEditTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTemplateMutation, { data, loading, error }] = useEditTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditTemplateMutation(baseOptions) {\n  return Apollo.useMutation(EditTemplateDocument, baseOptions);\n}\nexport const EditWorkoutDocument = gql`\n    mutation EditWorkout($id: Int!, $options: WorkoutInput!) {\n  editWorkout(id: $id, options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\n\n/**\n * __useEditWorkoutMutation__\n *\n * To run a mutation, you first call `useEditWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkoutMutation, { data, loading, error }] = useEditWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditWorkoutMutation(baseOptions) {\n  return Apollo.useMutation(EditWorkoutDocument, baseOptions);\n}\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  return Apollo.useMutation(ForgotPasswordDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\nexport const ExoDocument = gql`\n    query Exo {\n  exo {\n    id\n    exoId\n    exoDesc\n    bodyPart\n    langCd\n  }\n}\n    `;\n/**\n * __useExoQuery__\n *\n * To run a query within a React component, call `useExoQuery` and pass it any options that fit your needs.\n * When your component renders, `useExoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExoQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useExoQuery(baseOptions) {\n  return Apollo.useQuery(ExoDocument, baseOptions);\n}\nexport function useExoLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(ExoDocument, baseOptions);\n}\nexport const GenericWorkoutDocument = gql`\n    query GenericWorkout($genericWorkoutId: Int!) {\n  genericWorkout(genericWorkoutId: $genericWorkoutId) {\n    id\n    trainingType\n    trainingFrequency\n    genericWorkoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGenericWorkoutQuery__\n *\n * To run a query within a React component, call `useGenericWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useGenericWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGenericWorkoutQuery({\n *   variables: {\n *      genericWorkoutId: // value for 'genericWorkoutId'\n *   },\n * });\n */\n\nexport function useGenericWorkoutQuery(baseOptions) {\n  return Apollo.useQuery(GenericWorkoutDocument, baseOptions);\n}\nexport function useGenericWorkoutLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(GenericWorkoutDocument, baseOptions);\n}\nexport const GenericWorkoutsDocument = gql`\n    query GenericWorkouts {\n  genericWorkouts {\n    id\n    trainingType\n    trainingFrequency\n    genericWorkoutDetails {\n      id\n      workoutType\n      exoId\n      sessionNb\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGenericWorkoutsQuery__\n *\n * To run a query within a React component, call `useGenericWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGenericWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGenericWorkoutsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGenericWorkoutsQuery(baseOptions) {\n  return Apollo.useQuery(GenericWorkoutsDocument, baseOptions);\n}\nexport function useGenericWorkoutsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(GenericWorkoutsDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n    profile {\n      ...RegularProfile\n    }\n  }\n}\n    ${RegularUserFragmentDoc}\n${RegularProfileFragmentDoc}`;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport const TemplateDocument = gql`\n    query Template($templateId: Int!) {\n  template(templateId: $templateId) {\n    id\n    templateType\n    name\n    templateDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n/**\n * __useTemplateQuery__\n *\n * To run a query within a React component, call `useTemplateQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplateQuery({\n *   variables: {\n *      templateId: // value for 'templateId'\n *   },\n * });\n */\n\nexport function useTemplateQuery(baseOptions) {\n  return Apollo.useQuery(TemplateDocument, baseOptions);\n}\nexport function useTemplateLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(TemplateDocument, baseOptions);\n}\nexport const TemplatesDocument = gql`\n    query Templates {\n  templates {\n    id\n    templateType\n    name\n    templateDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n/**\n * __useTemplatesQuery__\n *\n * To run a query within a React component, call `useTemplatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplatesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTemplatesQuery(baseOptions) {\n  return Apollo.useQuery(TemplatesDocument, baseOptions);\n}\nexport function useTemplatesLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(TemplatesDocument, baseOptions);\n}\nexport const WorkoutDocument = gql`\n    query Workout($workoutId: Int!) {\n  workout(workoutId: $workoutId) {\n    id\n    workoutDt\n    createdAt\n    updatedAt\n    workoutType\n    workoutDesc\n    weekNb\n    workoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n/**\n * __useWorkoutQuery__\n *\n * To run a query within a React component, call `useWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutQuery({\n *   variables: {\n *      workoutId: // value for 'workoutId'\n *   },\n * });\n */\n\nexport function useWorkoutQuery(baseOptions) {\n  return Apollo.useQuery(WorkoutDocument, baseOptions);\n}\nexport function useWorkoutLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(WorkoutDocument, baseOptions);\n}\nexport const WorkoutsDocument = gql`\n    query Workouts($sens: Int, $cursor: String) {\n  workouts(sens: $sens, cursor: $cursor) {\n    hasMorePrev\n    hasMoreNext\n    weekNb\n    nextCursorValue\n    workouts {\n      id\n      workoutDt\n      createdAt\n      updatedAt\n      workoutType\n      workoutDesc\n      weekNb\n      workoutDetails {\n        id\n        exoId\n        exoDetail {\n          sets\n          feedback\n          reps\n          grade\n          rest\n          weight\n        }\n      }\n    }\n  }\n}\n    `;\n/**\n * __useWorkoutsQuery__\n *\n * To run a query within a React component, call `useWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutsQuery({\n *   variables: {\n *      sens: // value for 'sens'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useWorkoutsQuery(baseOptions) {\n  return Apollo.useQuery(WorkoutsDocument, baseOptions);\n}\nexport function useWorkoutsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(WorkoutsDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/pi/mntRaspi/trainv2/web/src/generated/graphql.tsx"],"names":["gql","Apollo","RegularProfileFragmentDoc","RegularErrorFragmentDoc","RegularTemplateFragmentDoc","RegularTemplateResponseFragmentDoc","RegularWorkoutFragmentDoc","RegularWorkoutResponseFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","ChangePasswordDocument","useChangePasswordMutation","baseOptions","useMutation","ChangeProfileDocument","useChangeProfileMutation","CreateTemplateDocument","useCreateTemplateMutation","CreateWorkoutDocument","useCreateWorkoutMutation","DeleteTemplateDocument","useDeleteTemplateMutation","DeleteWorkoutDocument","useDeleteWorkoutMutation","EditTemplateDocument","useEditTemplateMutation","EditWorkoutDocument","useEditWorkoutMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","ExoDocument","useExoQuery","useQuery","useExoLazyQuery","useLazyQuery","GenericWorkoutDocument","useGenericWorkoutQuery","useGenericWorkoutLazyQuery","GenericWorkoutsDocument","useGenericWorkoutsQuery","useGenericWorkoutsLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","TemplateDocument","useTemplateQuery","useTemplateLazyQuery","TemplatesDocument","useTemplatesQuery","useTemplatesLazyQuery","WorkoutDocument","useWorkoutQuery","useWorkoutLazyQuery","WorkoutsDocument","useWorkoutsQuery","useWorkoutsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  workout?: Maybe<Workout>;\n  workouts?: Maybe<PaginatedWorkout>;\n  exo?: Maybe<Array<Exo>>;\n  template?: Maybe<Template>;\n  templates?: Maybe<Array<Template>>;\n  genericWorkout?: Maybe<GenericWorkout>;\n  genericWorkouts?: Maybe<Array<GenericWorkout>>;\n};\n\n\nexport type QueryWorkoutArgs = {\n  workoutId: Scalars['Int'];\n};\n\n\nexport type QueryWorkoutsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  sens?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTemplateArgs = {\n  templateId: Scalars['Int'];\n};\n\n\nexport type QueryGenericWorkoutArgs = {\n  genericWorkoutId: Scalars['Int'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  profile?: Maybe<Profile>;\n};\n\nexport type Profile = {\n  __typename?: 'Profile';\n  id: Scalars['Float'];\n  lang_cd: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  trainingType: Scalars['String'];\n  sex: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Workout = {\n  __typename?: 'Workout';\n  id: Scalars['Float'];\n  userId: Scalars['Float'];\n  workoutDt: Scalars['DateTime'];\n  workoutType: Scalars['String'];\n  workoutDesc?: Maybe<Scalars['String']>;\n  workoutDetails?: Maybe<Array<WorkoutDetail>>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  weekNb: Scalars['String'];\n};\n\n\nexport type WorkoutDetail = {\n  __typename?: 'WorkoutDetail';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDetail: Array<ExoDetails>;\n  workoutId: Scalars['Int'];\n  workout: Workout;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type ExoDetails = {\n  __typename?: 'exoDetails';\n  sets: Scalars['Float'];\n  reps: Scalars['Float'];\n  weight: Scalars['Float'];\n  grade: Scalars['Float'];\n  rest?: Maybe<Scalars['Float']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type PaginatedWorkout = {\n  __typename?: 'PaginatedWorkout';\n  workouts: Array<Workout>;\n  hasMorePrev: Scalars['Boolean'];\n  hasMoreNext: Scalars['Boolean'];\n  weekNb: Scalars['String'];\n  nextCursorValue: Scalars['String'];\n};\n\nexport type Exo = {\n  __typename?: 'Exo';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDesc: Scalars['String'];\n  langCd: Scalars['String'];\n  bodyPart: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Template = {\n  __typename?: 'Template';\n  id: Scalars['Float'];\n  userId: Scalars['Float'];\n  name: Scalars['String'];\n  templateType: Scalars['String'];\n  templateDetails: Array<TemplateDetail>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type TemplateDetail = {\n  __typename?: 'TemplateDetail';\n  id: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDetail: Array<ExoDetails>;\n  templateId: Scalars['Float'];\n  template: Template;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type GenericWorkout = {\n  __typename?: 'GenericWorkout';\n  id: Scalars['Float'];\n  trainingType: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  genericWorkoutDetails: Array<GenericWorkoutDetail>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type GenericWorkoutDetail = {\n  __typename?: 'GenericWorkoutDetail';\n  id: Scalars['Float'];\n  workoutType: Scalars['String'];\n  sessionNb: Scalars['Float'];\n  exoId: Scalars['Float'];\n  exoDetail: Array<ExoDetails>;\n  genericWorkoutId: Scalars['Float'];\n  genericWorkout: GenericWorkout;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  changeProfile: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createWorkout: WorkoutResponse;\n  editWorkout: WorkoutResponse;\n  deleteWorkout: Scalars['Boolean'];\n  createTemplate: TemplateResponse;\n  editTemplate: TemplateResponse;\n  deleteTemplate: Scalars['Boolean'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationChangeProfileArgs = {\n  options: ProfileInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\n\nexport type MutationCreateWorkoutArgs = {\n  options: WorkoutInput;\n};\n\n\nexport type MutationEditWorkoutArgs = {\n  options: WorkoutInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteWorkoutArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateTemplateArgs = {\n  options: TemplateInput;\n};\n\n\nexport type MutationEditTemplateArgs = {\n  options: TemplateInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteTemplateArgs = {\n  id: Scalars['Int'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type ProfileInput = {\n  lang_cd: Scalars['String'];\n  trainingFrequency: Scalars['Float'];\n  trainingType: Scalars['String'];\n  sex: Scalars['String'];\n};\n\nexport type WorkoutResponse = {\n  __typename?: 'WorkoutResponse';\n  errors?: Maybe<Array<FieldError>>;\n  workout?: Maybe<Workout>;\n};\n\nexport type WorkoutInput = {\n  workoutDt: Scalars['DateTime'];\n  workoutType: Scalars['String'];\n  workoutDesc?: Maybe<Scalars['String']>;\n  workoutDetails: Array<WorkoutDetailInput>;\n};\n\nexport type WorkoutDetailInput = {\n  exoId: Scalars['String'];\n  exoDetail: Array<ExoDetailsInput>;\n};\n\nexport type ExoDetailsInput = {\n  sets: Scalars['Float'];\n  reps: Scalars['Float'];\n  weight: Scalars['Float'];\n  grade: Scalars['Float'];\n  rest?: Maybe<Scalars['Float']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type TemplateResponse = {\n  __typename?: 'TemplateResponse';\n  errors?: Maybe<Array<FieldError>>;\n  template?: Maybe<Template>;\n};\n\nexport type TemplateInput = {\n  templateType: Scalars['String'];\n  name: Scalars['String'];\n  templateDetails: Array<TemplateDetailInput>;\n};\n\nexport type TemplateDetailInput = {\n  exoId: Scalars['String'];\n  exoDetail: Array<ExoDetailsInput>;\n};\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularProfileFragment = (\n  { __typename?: 'Profile' }\n  & Pick<Profile, 'lang_cd' | 'sex' | 'trainingFrequency' | 'trainingType'>\n);\n\nexport type RegularTemplateFragment = (\n  { __typename?: 'Template' }\n  & Pick<Template, 'id' | 'templateType' | 'name'>\n  & { templateDetails: Array<(\n    { __typename?: 'TemplateDetail' }\n    & Pick<TemplateDetail, 'id' | 'exoId'>\n    & { exoDetail: Array<(\n      { __typename?: 'exoDetails' }\n      & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n    )> }\n  )> }\n);\n\nexport type RegularTemplateResponseFragment = (\n  { __typename?: 'TemplateResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, template?: Maybe<(\n    { __typename?: 'Template' }\n    & RegularTemplateFragment\n  )> }\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n);\n\nexport type RegularWorkoutFragment = (\n  { __typename?: 'Workout' }\n  & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n  & { workoutDetails?: Maybe<Array<(\n    { __typename?: 'WorkoutDetail' }\n    & Pick<WorkoutDetail, 'id' | 'exoId'>\n    & { exoDetail: Array<(\n      { __typename?: 'exoDetails' }\n      & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n    )> }\n  )>> }\n);\n\nexport type RegularWorkoutResponseFragment = (\n  { __typename?: 'WorkoutResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, workout?: Maybe<(\n    { __typename?: 'Workout' }\n    & RegularWorkoutFragment\n  )> }\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type ChangePasswordMutationVariables = Exact<{\n  token: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type ChangePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { changePassword: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type ChangeProfileMutationVariables = Exact<{\n  options: ProfileInput;\n}>;\n\n\nexport type ChangeProfileMutation = (\n  { __typename?: 'Mutation' }\n  & { changeProfile: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type CreateTemplateMutationVariables = Exact<{\n  options: TemplateInput;\n}>;\n\n\nexport type CreateTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & { createTemplate: (\n    { __typename?: 'TemplateResponse' }\n    & RegularTemplateResponseFragment\n  ) }\n);\n\nexport type CreateWorkoutMutationVariables = Exact<{\n  options: WorkoutInput;\n}>;\n\n\nexport type CreateWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & { createWorkout: (\n    { __typename?: 'WorkoutResponse' }\n    & RegularWorkoutResponseFragment\n  ) }\n);\n\nexport type DeleteTemplateMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTemplate'>\n);\n\nexport type DeleteWorkoutMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteWorkout'>\n);\n\nexport type EditTemplateMutationVariables = Exact<{\n  id: Scalars['Int'];\n  options: TemplateInput;\n}>;\n\n\nexport type EditTemplateMutation = (\n  { __typename?: 'Mutation' }\n  & { editTemplate: (\n    { __typename?: 'TemplateResponse' }\n    & RegularTemplateResponseFragment\n  ) }\n);\n\nexport type EditWorkoutMutationVariables = Exact<{\n  id: Scalars['Int'];\n  options: WorkoutInput;\n}>;\n\n\nexport type EditWorkoutMutation = (\n  { __typename?: 'Mutation' }\n  & { editWorkout: (\n    { __typename?: 'WorkoutResponse' }\n    & RegularWorkoutResponseFragment\n  ) }\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type ExoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ExoQuery = (\n  { __typename?: 'Query' }\n  & { exo?: Maybe<Array<(\n    { __typename?: 'Exo' }\n    & Pick<Exo, 'id' | 'exoId' | 'exoDesc' | 'bodyPart' | 'langCd'>\n  )>> }\n);\n\nexport type GenericWorkoutQueryVariables = Exact<{\n  genericWorkoutId: Scalars['Int'];\n}>;\n\n\nexport type GenericWorkoutQuery = (\n  { __typename?: 'Query' }\n  & { genericWorkout?: Maybe<(\n    { __typename?: 'GenericWorkout' }\n    & Pick<GenericWorkout, 'id' | 'trainingType' | 'trainingFrequency'>\n    & { genericWorkoutDetails: Array<(\n      { __typename?: 'GenericWorkoutDetail' }\n      & Pick<GenericWorkoutDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type GenericWorkoutsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GenericWorkoutsQuery = (\n  { __typename?: 'Query' }\n  & { genericWorkouts?: Maybe<Array<(\n    { __typename?: 'GenericWorkout' }\n    & Pick<GenericWorkout, 'id' | 'trainingType' | 'trainingFrequency'>\n    & { genericWorkoutDetails: Array<(\n      { __typename?: 'GenericWorkoutDetail' }\n      & Pick<GenericWorkoutDetail, 'id' | 'workoutType' | 'exoId' | 'sessionNb'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )> }\n  )>> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & { profile?: Maybe<(\n      { __typename?: 'Profile' }\n      & RegularProfileFragment\n    )> }\n    & RegularUserFragment\n  )> }\n);\n\nexport type TemplateQueryVariables = Exact<{\n  templateId: Scalars['Int'];\n}>;\n\n\nexport type TemplateQuery = (\n  { __typename?: 'Query' }\n  & { template?: Maybe<(\n    { __typename?: 'Template' }\n    & Pick<Template, 'id' | 'templateType' | 'name'>\n    & { templateDetails: Array<(\n      { __typename?: 'TemplateDetail' }\n      & Pick<TemplateDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type TemplatesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TemplatesQuery = (\n  { __typename?: 'Query' }\n  & { templates?: Maybe<Array<(\n    { __typename?: 'Template' }\n    & Pick<Template, 'id' | 'templateType' | 'name'>\n    & { templateDetails: Array<(\n      { __typename?: 'TemplateDetail' }\n      & Pick<TemplateDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )> }\n  )>> }\n);\n\nexport type WorkoutQueryVariables = Exact<{\n  workoutId: Scalars['Int'];\n}>;\n\n\nexport type WorkoutQuery = (\n  { __typename?: 'Query' }\n  & { workout?: Maybe<(\n    { __typename?: 'Workout' }\n    & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n    & { workoutDetails?: Maybe<Array<(\n      { __typename?: 'WorkoutDetail' }\n      & Pick<WorkoutDetail, 'id' | 'exoId'>\n      & { exoDetail: Array<(\n        { __typename?: 'exoDetails' }\n        & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n      )> }\n    )>> }\n  )> }\n);\n\nexport type WorkoutsQueryVariables = Exact<{\n  sens?: Maybe<Scalars['Int']>;\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WorkoutsQuery = (\n  { __typename?: 'Query' }\n  & { workouts?: Maybe<(\n    { __typename?: 'PaginatedWorkout' }\n    & Pick<PaginatedWorkout, 'hasMorePrev' | 'hasMoreNext' | 'weekNb' | 'nextCursorValue'>\n    & { workouts: Array<(\n      { __typename?: 'Workout' }\n      & Pick<Workout, 'id' | 'workoutDt' | 'createdAt' | 'updatedAt' | 'workoutType' | 'workoutDesc' | 'weekNb'>\n      & { workoutDetails?: Maybe<Array<(\n        { __typename?: 'WorkoutDetail' }\n        & Pick<WorkoutDetail, 'id' | 'exoId'>\n        & { exoDetail: Array<(\n          { __typename?: 'exoDetails' }\n          & Pick<ExoDetails, 'sets' | 'feedback' | 'reps' | 'grade' | 'rest' | 'weight'>\n        )> }\n      )>> }\n    )> }\n  )> }\n);\n\nexport const RegularProfileFragmentDoc = gql`\n    fragment RegularProfile on Profile {\n  lang_cd\n  sex\n  trainingFrequency\n  trainingType\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularTemplateFragmentDoc = gql`\n    fragment RegularTemplate on Template {\n  id\n  templateType\n  name\n  templateDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularTemplateResponseFragmentDoc = gql`\n    fragment RegularTemplateResponse on TemplateResponse {\n  errors {\n    ...RegularError\n  }\n  template {\n    ...RegularTemplate\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularTemplateFragmentDoc}`;\nexport const RegularWorkoutFragmentDoc = gql`\n    fragment RegularWorkout on Workout {\n  id\n  workoutDt\n  createdAt\n  updatedAt\n  workoutType\n  workoutDesc\n  weekNb\n  workoutDetails {\n    id\n    exoId\n    exoDetail {\n      sets\n      feedback\n      reps\n      grade\n      rest\n      weight\n    }\n  }\n}\n    `;\nexport const RegularWorkoutResponseFragmentDoc = gql`\n    fragment RegularWorkoutResponse on WorkoutResponse {\n  errors {\n    ...RegularError\n  }\n  workout {\n    ...RegularWorkout\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularWorkoutFragmentDoc}`;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {\n        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, baseOptions);\n      }\nexport type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;\nexport type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;\nexport type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;\nexport const ChangeProfileDocument = gql`\n    mutation ChangeProfile($options: ProfileInput!) {\n  changeProfile(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type ChangeProfileMutationFn = Apollo.MutationFunction<ChangeProfileMutation, ChangeProfileMutationVariables>;\n\n/**\n * __useChangeProfileMutation__\n *\n * To run a mutation, you first call `useChangeProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeProfileMutation, { data, loading, error }] = useChangeProfileMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useChangeProfileMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProfileMutation, ChangeProfileMutationVariables>) {\n        return Apollo.useMutation<ChangeProfileMutation, ChangeProfileMutationVariables>(ChangeProfileDocument, baseOptions);\n      }\nexport type ChangeProfileMutationHookResult = ReturnType<typeof useChangeProfileMutation>;\nexport type ChangeProfileMutationResult = Apollo.MutationResult<ChangeProfileMutation>;\nexport type ChangeProfileMutationOptions = Apollo.BaseMutationOptions<ChangeProfileMutation, ChangeProfileMutationVariables>;\nexport const CreateTemplateDocument = gql`\n    mutation CreateTemplate($options: TemplateInput!) {\n  createTemplate(options: $options) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\nexport type CreateTemplateMutationFn = Apollo.MutationFunction<CreateTemplateMutation, CreateTemplateMutationVariables>;\n\n/**\n * __useCreateTemplateMutation__\n *\n * To run a mutation, you first call `useCreateTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTemplateMutation, { data, loading, error }] = useCreateTemplateMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateTemplateMutation(baseOptions?: Apollo.MutationHookOptions<CreateTemplateMutation, CreateTemplateMutationVariables>) {\n        return Apollo.useMutation<CreateTemplateMutation, CreateTemplateMutationVariables>(CreateTemplateDocument, baseOptions);\n      }\nexport type CreateTemplateMutationHookResult = ReturnType<typeof useCreateTemplateMutation>;\nexport type CreateTemplateMutationResult = Apollo.MutationResult<CreateTemplateMutation>;\nexport type CreateTemplateMutationOptions = Apollo.BaseMutationOptions<CreateTemplateMutation, CreateTemplateMutationVariables>;\nexport const CreateWorkoutDocument = gql`\n    mutation CreateWorkout($options: WorkoutInput!) {\n  createWorkout(options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\nexport type CreateWorkoutMutationFn = Apollo.MutationFunction<CreateWorkoutMutation, CreateWorkoutMutationVariables>;\n\n/**\n * __useCreateWorkoutMutation__\n *\n * To run a mutation, you first call `useCreateWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createWorkoutMutation, { data, loading, error }] = useCreateWorkoutMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<CreateWorkoutMutation, CreateWorkoutMutationVariables>) {\n        return Apollo.useMutation<CreateWorkoutMutation, CreateWorkoutMutationVariables>(CreateWorkoutDocument, baseOptions);\n      }\nexport type CreateWorkoutMutationHookResult = ReturnType<typeof useCreateWorkoutMutation>;\nexport type CreateWorkoutMutationResult = Apollo.MutationResult<CreateWorkoutMutation>;\nexport type CreateWorkoutMutationOptions = Apollo.BaseMutationOptions<CreateWorkoutMutation, CreateWorkoutMutationVariables>;\nexport const DeleteTemplateDocument = gql`\n    mutation DeleteTemplate($id: Int!) {\n  deleteTemplate(id: $id)\n}\n    `;\nexport type DeleteTemplateMutationFn = Apollo.MutationFunction<DeleteTemplateMutation, DeleteTemplateMutationVariables>;\n\n/**\n * __useDeleteTemplateMutation__\n *\n * To run a mutation, you first call `useDeleteTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTemplateMutation, { data, loading, error }] = useDeleteTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTemplateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTemplateMutation, DeleteTemplateMutationVariables>) {\n        return Apollo.useMutation<DeleteTemplateMutation, DeleteTemplateMutationVariables>(DeleteTemplateDocument, baseOptions);\n      }\nexport type DeleteTemplateMutationHookResult = ReturnType<typeof useDeleteTemplateMutation>;\nexport type DeleteTemplateMutationResult = Apollo.MutationResult<DeleteTemplateMutation>;\nexport type DeleteTemplateMutationOptions = Apollo.BaseMutationOptions<DeleteTemplateMutation, DeleteTemplateMutationVariables>;\nexport const DeleteWorkoutDocument = gql`\n    mutation DeleteWorkout($id: Int!) {\n  deleteWorkout(id: $id)\n}\n    `;\nexport type DeleteWorkoutMutationFn = Apollo.MutationFunction<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>;\n\n/**\n * __useDeleteWorkoutMutation__\n *\n * To run a mutation, you first call `useDeleteWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteWorkoutMutation, { data, loading, error }] = useDeleteWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>) {\n        return Apollo.useMutation<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>(DeleteWorkoutDocument, baseOptions);\n      }\nexport type DeleteWorkoutMutationHookResult = ReturnType<typeof useDeleteWorkoutMutation>;\nexport type DeleteWorkoutMutationResult = Apollo.MutationResult<DeleteWorkoutMutation>;\nexport type DeleteWorkoutMutationOptions = Apollo.BaseMutationOptions<DeleteWorkoutMutation, DeleteWorkoutMutationVariables>;\nexport const EditTemplateDocument = gql`\n    mutation EditTemplate($id: Int!, $options: TemplateInput!) {\n  editTemplate(id: $id, options: $options) {\n    ...RegularTemplateResponse\n  }\n}\n    ${RegularTemplateResponseFragmentDoc}`;\nexport type EditTemplateMutationFn = Apollo.MutationFunction<EditTemplateMutation, EditTemplateMutationVariables>;\n\n/**\n * __useEditTemplateMutation__\n *\n * To run a mutation, you first call `useEditTemplateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTemplateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTemplateMutation, { data, loading, error }] = useEditTemplateMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditTemplateMutation(baseOptions?: Apollo.MutationHookOptions<EditTemplateMutation, EditTemplateMutationVariables>) {\n        return Apollo.useMutation<EditTemplateMutation, EditTemplateMutationVariables>(EditTemplateDocument, baseOptions);\n      }\nexport type EditTemplateMutationHookResult = ReturnType<typeof useEditTemplateMutation>;\nexport type EditTemplateMutationResult = Apollo.MutationResult<EditTemplateMutation>;\nexport type EditTemplateMutationOptions = Apollo.BaseMutationOptions<EditTemplateMutation, EditTemplateMutationVariables>;\nexport const EditWorkoutDocument = gql`\n    mutation EditWorkout($id: Int!, $options: WorkoutInput!) {\n  editWorkout(id: $id, options: $options) {\n    ...RegularWorkoutResponse\n  }\n}\n    ${RegularWorkoutResponseFragmentDoc}`;\nexport type EditWorkoutMutationFn = Apollo.MutationFunction<EditWorkoutMutation, EditWorkoutMutationVariables>;\n\n/**\n * __useEditWorkoutMutation__\n *\n * To run a mutation, you first call `useEditWorkoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditWorkoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editWorkoutMutation, { data, loading, error }] = useEditWorkoutMutation({\n *   variables: {\n *      id: // value for 'id'\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useEditWorkoutMutation(baseOptions?: Apollo.MutationHookOptions<EditWorkoutMutation, EditWorkoutMutationVariables>) {\n        return Apollo.useMutation<EditWorkoutMutation, EditWorkoutMutationVariables>(EditWorkoutDocument, baseOptions);\n      }\nexport type EditWorkoutMutationHookResult = ReturnType<typeof useEditWorkoutMutation>;\nexport type EditWorkoutMutationResult = Apollo.MutationResult<EditWorkoutMutation>;\nexport type EditWorkoutMutationOptions = Apollo.BaseMutationOptions<EditWorkoutMutation, EditWorkoutMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const ExoDocument = gql`\n    query Exo {\n  exo {\n    id\n    exoId\n    exoDesc\n    bodyPart\n    langCd\n  }\n}\n    `;\n\n/**\n * __useExoQuery__\n *\n * To run a query within a React component, call `useExoQuery` and pass it any options that fit your needs.\n * When your component renders, `useExoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExoQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useExoQuery(baseOptions?: Apollo.QueryHookOptions<ExoQuery, ExoQueryVariables>) {\n        return Apollo.useQuery<ExoQuery, ExoQueryVariables>(ExoDocument, baseOptions);\n      }\nexport function useExoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ExoQuery, ExoQueryVariables>) {\n          return Apollo.useLazyQuery<ExoQuery, ExoQueryVariables>(ExoDocument, baseOptions);\n        }\nexport type ExoQueryHookResult = ReturnType<typeof useExoQuery>;\nexport type ExoLazyQueryHookResult = ReturnType<typeof useExoLazyQuery>;\nexport type ExoQueryResult = Apollo.QueryResult<ExoQuery, ExoQueryVariables>;\nexport const GenericWorkoutDocument = gql`\n    query GenericWorkout($genericWorkoutId: Int!) {\n  genericWorkout(genericWorkoutId: $genericWorkoutId) {\n    id\n    trainingType\n    trainingFrequency\n    genericWorkoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGenericWorkoutQuery__\n *\n * To run a query within a React component, call `useGenericWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useGenericWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGenericWorkoutQuery({\n *   variables: {\n *      genericWorkoutId: // value for 'genericWorkoutId'\n *   },\n * });\n */\nexport function useGenericWorkoutQuery(baseOptions: Apollo.QueryHookOptions<GenericWorkoutQuery, GenericWorkoutQueryVariables>) {\n        return Apollo.useQuery<GenericWorkoutQuery, GenericWorkoutQueryVariables>(GenericWorkoutDocument, baseOptions);\n      }\nexport function useGenericWorkoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GenericWorkoutQuery, GenericWorkoutQueryVariables>) {\n          return Apollo.useLazyQuery<GenericWorkoutQuery, GenericWorkoutQueryVariables>(GenericWorkoutDocument, baseOptions);\n        }\nexport type GenericWorkoutQueryHookResult = ReturnType<typeof useGenericWorkoutQuery>;\nexport type GenericWorkoutLazyQueryHookResult = ReturnType<typeof useGenericWorkoutLazyQuery>;\nexport type GenericWorkoutQueryResult = Apollo.QueryResult<GenericWorkoutQuery, GenericWorkoutQueryVariables>;\nexport const GenericWorkoutsDocument = gql`\n    query GenericWorkouts {\n  genericWorkouts {\n    id\n    trainingType\n    trainingFrequency\n    genericWorkoutDetails {\n      id\n      workoutType\n      exoId\n      sessionNb\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGenericWorkoutsQuery__\n *\n * To run a query within a React component, call `useGenericWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGenericWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGenericWorkoutsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGenericWorkoutsQuery(baseOptions?: Apollo.QueryHookOptions<GenericWorkoutsQuery, GenericWorkoutsQueryVariables>) {\n        return Apollo.useQuery<GenericWorkoutsQuery, GenericWorkoutsQueryVariables>(GenericWorkoutsDocument, baseOptions);\n      }\nexport function useGenericWorkoutsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GenericWorkoutsQuery, GenericWorkoutsQueryVariables>) {\n          return Apollo.useLazyQuery<GenericWorkoutsQuery, GenericWorkoutsQueryVariables>(GenericWorkoutsDocument, baseOptions);\n        }\nexport type GenericWorkoutsQueryHookResult = ReturnType<typeof useGenericWorkoutsQuery>;\nexport type GenericWorkoutsLazyQueryHookResult = ReturnType<typeof useGenericWorkoutsLazyQuery>;\nexport type GenericWorkoutsQueryResult = Apollo.QueryResult<GenericWorkoutsQuery, GenericWorkoutsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n    profile {\n      ...RegularProfile\n    }\n  }\n}\n    ${RegularUserFragmentDoc}\n${RegularProfileFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const TemplateDocument = gql`\n    query Template($templateId: Int!) {\n  template(templateId: $templateId) {\n    id\n    templateType\n    name\n    templateDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTemplateQuery__\n *\n * To run a query within a React component, call `useTemplateQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplateQuery({\n *   variables: {\n *      templateId: // value for 'templateId'\n *   },\n * });\n */\nexport function useTemplateQuery(baseOptions: Apollo.QueryHookOptions<TemplateQuery, TemplateQueryVariables>) {\n        return Apollo.useQuery<TemplateQuery, TemplateQueryVariables>(TemplateDocument, baseOptions);\n      }\nexport function useTemplateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TemplateQuery, TemplateQueryVariables>) {\n          return Apollo.useLazyQuery<TemplateQuery, TemplateQueryVariables>(TemplateDocument, baseOptions);\n        }\nexport type TemplateQueryHookResult = ReturnType<typeof useTemplateQuery>;\nexport type TemplateLazyQueryHookResult = ReturnType<typeof useTemplateLazyQuery>;\nexport type TemplateQueryResult = Apollo.QueryResult<TemplateQuery, TemplateQueryVariables>;\nexport const TemplatesDocument = gql`\n    query Templates {\n  templates {\n    id\n    templateType\n    name\n    templateDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTemplatesQuery__\n *\n * To run a query within a React component, call `useTemplatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTemplatesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTemplatesQuery(baseOptions?: Apollo.QueryHookOptions<TemplatesQuery, TemplatesQueryVariables>) {\n        return Apollo.useQuery<TemplatesQuery, TemplatesQueryVariables>(TemplatesDocument, baseOptions);\n      }\nexport function useTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TemplatesQuery, TemplatesQueryVariables>) {\n          return Apollo.useLazyQuery<TemplatesQuery, TemplatesQueryVariables>(TemplatesDocument, baseOptions);\n        }\nexport type TemplatesQueryHookResult = ReturnType<typeof useTemplatesQuery>;\nexport type TemplatesLazyQueryHookResult = ReturnType<typeof useTemplatesLazyQuery>;\nexport type TemplatesQueryResult = Apollo.QueryResult<TemplatesQuery, TemplatesQueryVariables>;\nexport const WorkoutDocument = gql`\n    query Workout($workoutId: Int!) {\n  workout(workoutId: $workoutId) {\n    id\n    workoutDt\n    createdAt\n    updatedAt\n    workoutType\n    workoutDesc\n    weekNb\n    workoutDetails {\n      id\n      exoId\n      exoDetail {\n        sets\n        feedback\n        reps\n        grade\n        rest\n        weight\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkoutQuery__\n *\n * To run a query within a React component, call `useWorkoutQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutQuery({\n *   variables: {\n *      workoutId: // value for 'workoutId'\n *   },\n * });\n */\nexport function useWorkoutQuery(baseOptions: Apollo.QueryHookOptions<WorkoutQuery, WorkoutQueryVariables>) {\n        return Apollo.useQuery<WorkoutQuery, WorkoutQueryVariables>(WorkoutDocument, baseOptions);\n      }\nexport function useWorkoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkoutQuery, WorkoutQueryVariables>) {\n          return Apollo.useLazyQuery<WorkoutQuery, WorkoutQueryVariables>(WorkoutDocument, baseOptions);\n        }\nexport type WorkoutQueryHookResult = ReturnType<typeof useWorkoutQuery>;\nexport type WorkoutLazyQueryHookResult = ReturnType<typeof useWorkoutLazyQuery>;\nexport type WorkoutQueryResult = Apollo.QueryResult<WorkoutQuery, WorkoutQueryVariables>;\nexport const WorkoutsDocument = gql`\n    query Workouts($sens: Int, $cursor: String) {\n  workouts(sens: $sens, cursor: $cursor) {\n    hasMorePrev\n    hasMoreNext\n    weekNb\n    nextCursorValue\n    workouts {\n      id\n      workoutDt\n      createdAt\n      updatedAt\n      workoutType\n      workoutDesc\n      weekNb\n      workoutDetails {\n        id\n        exoId\n        exoDetail {\n          sets\n          feedback\n          reps\n          grade\n          rest\n          weight\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWorkoutsQuery__\n *\n * To run a query within a React component, call `useWorkoutsQuery` and pass it any options that fit your needs.\n * When your component renders, `useWorkoutsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWorkoutsQuery({\n *   variables: {\n *      sens: // value for 'sens'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useWorkoutsQuery(baseOptions?: Apollo.QueryHookOptions<WorkoutsQuery, WorkoutsQueryVariables>) {\n        return Apollo.useQuery<WorkoutsQuery, WorkoutsQueryVariables>(WorkoutsDocument, baseOptions);\n      }\nexport function useWorkoutsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WorkoutsQuery, WorkoutsQueryVariables>) {\n          return Apollo.useLazyQuery<WorkoutsQuery, WorkoutsQueryVariables>(WorkoutsDocument, baseOptions);\n        }\nexport type WorkoutsQueryHookResult = ReturnType<typeof useWorkoutsQuery>;\nexport type WorkoutsLazyQueryHookResult = ReturnType<typeof useWorkoutsLazyQuery>;\nexport type WorkoutsQueryResult = Apollo.QueryResult<WorkoutsQuery, WorkoutsQueryVariables>;"]},"metadata":{},"sourceType":"module"}